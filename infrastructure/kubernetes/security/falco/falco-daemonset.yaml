apiVersion: v1
kind: Namespace
metadata:
  name: security
  labels:
    istio-injection: disabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules
  namespace: security
data:
  custom-rules.yaml: |
    - required_engine_version: 10
    - list: isectech_trusted_images
      items: ["gcr.io/isectech/", "us-docker.pkg.dev/isectech/"]

    - macro: never_true
      condition: (evt.num=0)

    - rule: Detect Privileged Container Start
      desc: A privileged container was started
      condition: >
        container and evt.type=container and container.privileged=true and evt.dir = <
      output: "Privileged container start (user=%user.name image=%container.image.repository:%container.image.tag pod=%k8s.pod.name ns=%k8s.ns.name)"
      priority: CRITICAL
      tags: [container, mitre_execution]

    - rule: Detect Shell in Container
      desc: A shell was spawned in a container
      condition: >
        spawned_process and container and proc.name in (bash, sh, zsh) and not evt.arg[0] startswith "kubectl"
      output: "Shell spawned in container (user=%user.name command=%proc.cmdline pod=%k8s.pod.name ns=%k8s.ns.name)"
      priority: HIGH
      tags: [container, mitre_execution]

    - rule: Detect Write Below Etc
      desc: File below /etc opened for writing
      condition: >
        fileopen and evt.dir != "<" and fd.name startswith "/etc/"
      output: "File below /etc written (user=%user.name file=%fd.name pod=%k8s.pod.name ns=%k8s.ns.name)"
      priority: MEDIUM
      tags: [filesystem]

    - rule: Detect Secret Access
      desc: Access to Kubernetes secrets mounted in pods
      condition: >
        open_read and k8s and fd.name contains "/var/run/secrets/kubernetes.io"
      output: "Kubernetes secret accessed (user=%user.name file=%fd.name pod=%k8s.pod.name ns=%k8s.ns.name)"
      priority: HIGH
      tags: [k8s, secrets]
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: security
  labels:
    app.kubernetes.io/name: falco
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: falco
  template:
    metadata:
      labels:
        app.kubernetes.io/name: falco
    spec:
      serviceAccountName: falco
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
      containers:
        - name: falco
          image: falcosecurity/falco-no-driver:latest
          args: ["/usr/bin/falco", "-K", "/etc/falco/falco.yaml", "-r", "/etc/falco/custom-rules.yaml"]
          securityContext:
            privileged: true
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1024Mi
          volumeMounts:
            - mountPath: /etc/falco/custom-rules.yaml
              name: rules
              subPath: custom-rules.yaml
            - mountPath: /var/run/falco
              name: run
            - mountPath: /host/dev
              name: dev-fs
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/var/run/docker.sock
              name: docker-sock
              readOnly: true
            - mountPath: /host/sys/module
              name: modules
              readOnly: true
      volumes:
        - name: rules
          configMap:
            name: falco-rules
        - name: run
          hostPath:
            path: /var/run/falco
        - name: dev-fs
          hostPath:
            path: /dev
        - name: proc-fs
          hostPath:
            path: /proc
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: modules
          hostPath:
            path: /sys/module
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: security
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
rules:
  - apiGroups: [""]
    resources: ["nodes", "namespaces", "pods", "events"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco
subjects:
  - kind: ServiceAccount
    name: falco
    namespace: security


