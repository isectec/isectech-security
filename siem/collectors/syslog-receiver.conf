# iSECTECH SIEM Syslog Receiver Configuration
# High-performance syslog collection for network devices and legacy systems

# ═══════════════════════════════════════════════════════════════════════════════
# GLOBAL CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

global(
    # Process configuration
    processInternalMessages="on"
    maxMessageSize="64k"
    parser.supportCompressionExtension="on"
    
    # Network settings
    net.enableDNS="off"
    net.aclAddHostnameOnFail="off"
    net.aclResolveHostname="off"
    
    # Performance settings
    workDirectory="/var/spool/rsyslog"
    repeatedMsgReduction="off"
    
    # Security settings
    preserveFQDN="on"
    
    # Debug settings (disable in production)
    debug.logFile="/var/log/rsyslog-debug.log"
    debug.whitelist="off"
)

# ═══════════════════════════════════════════════════════════════════════════════
# MODULE LOADING
# ═══════════════════════════════════════════════════════════════════════════════

# UDP syslog reception
module(load="imudp")

# TCP syslog reception  
module(load="imtcp")

# TLS encrypted syslog
module(load="imtcp" StreamDriver.Name="gtls" StreamDriver.Mode="1")

# Reliable event logging protocol (RELP)
module(load="imrelp")

# Kafka output module
module(load="omkafka")

# JSON parsing
module(load="mmjsonparse")

# Normalization module
module(load="mmnormalize")

# GeoIP lookup
module(load="mmgeoip")

# ═══════════════════════════════════════════════════════════════════════════════
# INPUT CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Standard UDP syslog (port 514)
input(
    type="imudp"
    port="514"
    ruleset="network_devices"
)

# Secure UDP syslog (port 1514)
input(
    type="imudp"
    port="1514" 
    ruleset="secure_network_devices"
)

# Standard TCP syslog (port 514)
input(
    type="imtcp"
    port="514"
    ruleset="network_devices"
)

# Secure TCP syslog with TLS (port 6514)
input(
    type="imtcp"
    port="6514"
    tls="on"
    streamDriver.CheckExtendedKeyPurpose="on"
    streamDriver.PrioritizeSAN="on"
    streamDriver.TlsVerifyDepth="10"
    streamDriverCertFile="/etc/rsyslog/certs/server.crt"
    streamDriverKeyFile="/etc/rsyslog/certs/server.key"
    streamDriverCAFile="/etc/rsyslog/certs/ca.crt"
    streamDriverAuthMode="x509/name"
    streamDriverPermittedPeers=["*.isectech.local"]
    ruleset="secure_network_devices"
)

# RELP input for reliable delivery (port 20514)
input(
    type="imrelp"
    port="20514"
    tls="on"
    tls.caCert="/etc/rsyslog/certs/ca.crt"
    tls.myCert="/etc/rsyslog/certs/server.crt"
    tls.myPrivKey="/etc/rsyslog/certs/server.key"
    tls.authmode="x509/name"
    tls.permittedpeer=["*.isectech.local"]
    ruleset="critical_network_devices"
)

# ═══════════════════════════════════════════════════════════════════════════════
# PARSING RULESETS
# ═══════════════════════════════════════════════════════════════════════════════

# Ruleset for standard network devices
ruleset(name="network_devices") {
    # Add receiving timestamp
    set $.received_at = $timegenerated;
    set $.source_ip = $fromhost-ip;
    set $.source_hostname = $fromhost;
    
    # Device type detection and routing
    if $programname contains "cisco" or $msg contains "%ASA-" or $msg contains "%FWSM-" then {
        call cisco_parsing
    } else if $programname contains "paloalto" or $msg contains "1,TRAFFIC" then {
        call paloalto_parsing  
    } else if $programname contains "juniper" or $msg contains "RT_FLOW" then {
        call juniper_parsing
    } else if $programname contains "fortinet" or $msg contains "type=traffic" then {
        call fortinet_parsing
    } else if $programname contains "checkpoint" or $msg contains "[action" then {
        call checkpoint_parsing
    } else if $msg contains "DHCP" then {
        call dhcp_parsing
    } else if $msg contains "DNS" then {
        call dns_parsing
    } else {
        call generic_parsing
    }
    
    # Add common fields
    set $.log_type = "network_device";
    set $.environment = "production";
    set $.tenant_id = "isectech";
    
    # GeoIP lookup for source IP
    if $.source_ip != "127.0.0.1" and $.source_ip != "" then {
        action(type="mmgeoip" 
               key="$.source_ip" 
               target="$.geoip"
               db="/usr/share/GeoIP/GeoLite2-City.mmdb")
    }
    
    # Risk scoring
    call risk_scoring
    
    # Output to Kafka
    call kafka_output
}

# Ruleset for secure network devices (higher priority)
ruleset(name="secure_network_devices") {
    set $.security_level = "high";
    set $.encrypted_transport = "true";
    call network_devices
}

# Ruleset for critical network devices (highest priority)
ruleset(name="critical_network_devices") {
    set $.security_level = "critical";
    set $.reliable_transport = "true";
    call network_devices
}

# ═══════════════════════════════════════════════════════════════════════════════
# DEVICE-SPECIFIC PARSING FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Cisco ASA/FTD/IOS Parsing
ruleset(name="cisco_parsing") {
    # Parse Cisco ASA format: %ASA-Level-MessageNumber: Message
    if $msg contains "%ASA-" then {
        set $.device_vendor = "cisco";
        set $.device_type = "firewall";
        set $.device_model = "asa";
        
        # Extract severity and message ID
        set $.severity_match = re_extract($msg, "%ASA-([0-9])-([0-9]+): (.*)", 0, 1, "");
        set $.message_id = re_extract($msg, "%ASA-([0-9])-([0-9]+): (.*)", 0, 2, "");
        set $.clean_message = re_extract($msg, "%ASA-([0-9])-([0-9]+): (.*)", 0, 3, "");
        
        # Traffic events
        if $.message_id == "106023" or $.message_id == "106100" then {
            set $.event_type = "firewall_deny";
            set $.action = "deny";
            set $.risk_score = 3;
        } else if $.message_id == "106006" or $.message_id == "106015" then {
            set $.event_type = "firewall_permit";
            set $.action = "permit";  
            set $.risk_score = 1;
        }
        
        # Authentication events
        if $.message_id == "113004" or $.message_id == "113005" then {
            set $.event_type = "authentication";
            if $.message_id == "113005" then {
                set $.auth_result = "failure";
                set $.risk_score = 5;
            } else {
                set $.auth_result = "success";
                set $.risk_score = 1;
            }
        }
        
        # VPN events
        if $.message_id == "722022" or $.message_id == "722023" then {
            set $.event_type = "vpn";
            set $.risk_score = 2;
        }
        
        # Extract IP addresses
        set $.src_ip = re_extract($.clean_message, "([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})", 0, 1, "");
        set $.dest_ip = re_extract($.clean_message, "to ([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})", 0, 1, "");
        
        # Extract ports
        set $.src_port = re_extract($.clean_message, "/([0-9]{1,5})", 0, 1, "");
        set $.dest_port = re_extract($.clean_message, "to [^/]+/([0-9]{1,5})", 0, 1, "");
        
    } else if $msg contains "%FTD-" then {
        set $.device_vendor = "cisco";
        set $.device_type = "firewall";
        set $.device_model = "ftd";
    }
}

# Palo Alto Networks Parsing
ruleset(name="paloalto_parsing") {
    set $.device_vendor = "paloalto";
    set $.device_type = "firewall";
    
    # Parse PAN-OS CSV format
    if $msg contains "1,TRAFFIC" then {
        set $.event_type = "traffic";
        # Split CSV fields - simplified parsing
        set $.csv_fields = split($msg, ",");
        
        if $.csv_fields[8] != "" then set $.src_ip = $.csv_fields[8];
        if $.csv_fields[9] != "" then set $.dest_ip = $.csv_fields[9];
        if $.csv_fields[10] != "" then set $.src_port = $.csv_fields[10];  
        if $.csv_fields[11] != "" then set $.dest_port = $.csv_fields[11];
        if $.csv_fields[28] != "" then set $.action = $.csv_fields[28];
        
        if $.action == "deny" or $.action == "drop" then {
            set $.risk_score = 4;
        } else {
            set $.risk_score = 1;
        }
        
    } else if $msg contains "1,THREAT" then {
        set $.event_type = "threat";
        set $.risk_score = 7;
    }
}

# Juniper SRX/EX Parsing  
ruleset(name="juniper_parsing") {
    set $.device_vendor = "juniper";
    
    if $msg contains "RT_FLOW" then {
        set $.device_type = "firewall";
        set $.event_type = "flow";
        
        # Parse Juniper structured format
        if $msg contains "RT_FLOW_SESSION_DENY" then {
            set $.action = "deny";
            set $.risk_score = 4;
        } else if $msg contains "RT_FLOW_SESSION_CREATE" then {
            set $.action = "create"; 
            set $.risk_score = 1;
        }
        
        # Extract IPs from source-address and destination-address
        set $.src_ip = re_extract($msg, "source-address=\"([^\"]+)\"", 0, 1, "");
        set $.dest_ip = re_extract($msg, "destination-address=\"([^\"]+)\"", 0, 1, "");
        set $.src_port = re_extract($msg, "source-port=\"([^\"]+)\"", 0, 1, "");
        set $.dest_port = re_extract($msg, "destination-port=\"([^\"]+)\"", 0, 1, "");
    }
}

# Fortinet FortiGate Parsing
ruleset(name="fortinet_parsing") {
    set $.device_vendor = "fortinet";
    set $.device_type = "firewall";
    
    # Parse key-value pairs
    if $msg contains "type=traffic" then {
        set $.event_type = "traffic";
        
        set $.src_ip = re_extract($msg, "srcip=([0-9\\.]+)", 0, 1, "");
        set $.dest_ip = re_extract($msg, "dstip=([0-9\\.]+)", 0, 1, "");
        set $.src_port = re_extract($msg, "srcport=([0-9]+)", 0, 1, "");
        set $.dest_port = re_extract($msg, "dstport=([0-9]+)", 0, 1, "");
        set $.action = re_extract($msg, "action=([a-z]+)", 0, 1, "");
        
        if $.action == "deny" or $.action == "block" then {
            set $.risk_score = 4;
        } else {
            set $.risk_score = 1;
        }
    }
}

# Check Point Parsing
ruleset(name="checkpoint_parsing") {
    set $.device_vendor = "checkpoint";
    set $.device_type = "firewall";
    
    # Parse Check Point format
    if $msg contains "[action" then {
        set $.action = re_extract($msg, "\\[action \"([^\"]+)\"\\]", 0, 1, "");
        set $.src_ip = re_extract($msg, "\\[src: ([0-9\\.]+)\\]", 0, 1, "");
        set $.dest_ip = re_extract($msg, "\\[dst: ([0-9\\.]+)\\]", 0, 1, "");
        
        if $.action == "drop" or $.action == "reject" then {
            set $.event_type = "firewall_deny";
            set $.risk_score = 4;
        } else {
            set $.event_type = "firewall_permit";
            set $.risk_score = 1;
        }
    }
}

# DHCP Events Parsing
ruleset(name="dhcp_parsing") {
    set $.event_type = "dhcp";
    set $.service = "dhcp";
    
    if $msg contains "DHCPACK" then {
        set $.dhcp_action = "ack";
        set $.risk_score = 1;
    } else if $msg contains "DHCPNAK" then {
        set $.dhcp_action = "nak";
        set $.risk_score = 2;
    } else if $msg contains "DHCPDISCOVER" then {
        set $.dhcp_action = "discover";
        set $.risk_score = 1;
    }
    
    # Extract client IP and MAC
    set $.client_ip = re_extract($msg, "to ([0-9\\.]+)", 0, 1, "");
    set $.client_mac = re_extract($msg, "\\(([0-9a-f:]{17})\\)", 0, 1, "");
}

# DNS Events Parsing
ruleset(name="dns_parsing") {
    set $.event_type = "dns";
    set $.service = "dns";
    
    if $msg contains "query" then {
        set $.dns_action = "query";
        set $.risk_score = 1;
        
        # Extract domain
        set $.dns_domain = re_extract($msg, "query: ([^ ]+)", 0, 1, "");
        
        # Check for suspicious domains
        if $.dns_domain contains "malware" or $.dns_domain contains "phishing" then {
            set $.risk_score = 8;
            set $.threat_indicator = "malicious_domain";
        }
    }
}

# Generic parsing for unknown formats
ruleset(name="generic_parsing") {
    set $.device_vendor = "unknown";
    set $.device_type = "network_device";
    set $.event_type = "generic";
    set $.risk_score = 1;
    
    # Try to extract common fields
    set $.potential_ip = re_extract($msg, "([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})", 0, 1, "");
    if $.potential_ip != "" then {
        set $.src_ip = $.potential_ip;
    }
}

# ═══════════════════════════════════════════════════════════════════════════════
# RISK SCORING AND ENRICHMENT
# ═══════════════════════════════════════════════════════════════════════════════

ruleset(name="risk_scoring") {
    # Initialize base risk score if not set
    if $.risk_score == "" then {
        set $.risk_score = 1;
    }
    
    # Geographic risk assessment
    if $.geoip!country_code != "" then {
        # High-risk countries
        if $.geoip!country_code == "CN" or $.geoip!country_code == "RU" or 
           $.geoip!country_code == "KP" or $.geoip!country_code == "IR" then {
            set $.risk_score = $.risk_score + 2;
            set $.geographic_risk = "high";
        }
        # Medium-risk countries
        else if $.geoip!country_code == "PK" or $.geoip!country_code == "BD" then {
            set $.risk_score = $.risk_score + 1;
            set $.geographic_risk = "medium";
        }
        else {
            set $.geographic_risk = "low";
        }
    }
    
    # Time-based risk (off-hours activity)
    if $hour < 6 or $hour > 22 then {
        set $.risk_score = $.risk_score + 1;
        set $.time_risk = "off_hours";
    }
    
    # Port-based risk assessment
    if $.dest_port == "22" or $.dest_port == "3389" or $.dest_port == "445" then {
        set $.risk_score = $.risk_score + 1;
        set $.port_risk = "administrative";
    } else if $.dest_port == "1433" or $.dest_port == "3306" or $.dest_port == "5432" then {
        set $.risk_score = $.risk_score + 2;
        set $.port_risk = "database";
    }
    
    # Set alert priority based on final risk score
    if $.risk_score >= 8 then {
        set $.alert_priority = "critical";
    } else if $.risk_score >= 6 then {
        set $.alert_priority = "high";
    } else if $.risk_score >= 4 then {
        set $.alert_priority = "medium";
    } else {
        set $.alert_priority = "low";
    }
}

# ═══════════════════════════════════════════════════════════════════════════════
# OUTPUT CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

ruleset(name="kafka_output") {
    # Create structured JSON message
    set $.json_msg = "{" &
        "\"timestamp\":\"" & $.received_at & "\"," &
        "\"source_ip\":\"" & $.source_ip & "\"," &
        "\"source_hostname\":\"" & $.source_hostname & "\"," &
        "\"device_vendor\":\"" & $.device_vendor & "\"," &
        "\"device_type\":\"" & $.device_type & "\"," &
        "\"device_model\":\"" & $.device_model & "\"," &
        "\"event_type\":\"" & $.event_type & "\"," &
        "\"action\":\"" & $.action & "\"," &
        "\"src_ip\":\"" & $.src_ip & "\"," &
        "\"dest_ip\":\"" & $.dest_ip & "\"," &
        "\"src_port\":\"" & $.src_port & "\"," &
        "\"dest_port\":\"" & $.dest_port & "\"," &
        "\"risk_score\":" & $.risk_score & "," &
        "\"alert_priority\":\"" & $.alert_priority & "\"," &
        "\"log_type\":\"" & $.log_type & "\"," &
        "\"environment\":\"" & $.environment & "\"," &
        "\"tenant_id\":\"" & $.tenant_id & "\"," &
        "\"raw_message\":\"" & $msg & "\"," &
        "\"geoip\":" & $.geoip &
        "}";
    
    # Send to Kafka
    action(
        type="omkafka"
        broker=["kafka-1.isectech.local:9092", "kafka-2.isectech.local:9092", "kafka-3.isectech.local:9092"]
        topic="network-device-logs"
        key="$.source_ip"
        message="$.json_msg"
        
        # Performance settings
        queue.size="100000"
        queue.dequeuebatchsize="1000"
        queue.maxdiskspace="1g"
        queue.type="LinkedList"
        
        # Reliability settings
        queue.saveonshutdown="on"
        queue.checkpointinterval="1000"
        
        # Kafka-specific settings
        confParam=["compression.type=gzip", 
                   "batch.num.messages=1000",
                   "queue.buffering.max.ms=1000",
                   "retry.backoff.ms=1000"]
    )
    
    # Send high-priority events to separate topic
    if $.alert_priority == "critical" or $.alert_priority == "high" then {
        action(
            type="omkafka"
            broker=["kafka-1.isectech.local:9092", "kafka-2.isectech.local:9092", "kafka-3.isectech.local:9092"]
            topic="high-priority-network-alerts"
            key="$.source_ip"
            message="$.json_msg"
            queue.type="Direct"
        )
    }
}

# ═══════════════════════════════════════════════════════════════════════════════
# LOCAL FILE LOGGING (BACKUP)
# ═══════════════════════════════════════════════════════════════════════════════

# Log high-priority events locally for backup
if $.alert_priority == "critical" then {
    action(
        type="omfile"
        file="/var/log/siem/critical-network-events.log"
        template="RSYSLOG_FileFormat"
        queue.type="Direct"
    )
}

# Log all network device events by vendor
$template NetworkDeviceFormat,"%timestamp:::date-rfc3339% %hostname% %syslogtag% %msg%\n"

if $.device_vendor == "cisco" then {
    action(type="omfile" file="/var/log/siem/cisco-devices.log" template="NetworkDeviceFormat")
} else if $.device_vendor == "paloalto" then {
    action(type="omfile" file="/var/log/siem/paloalto-devices.log" template="NetworkDeviceFormat")
} else if $.device_vendor == "juniper" then {
    action(type="omfile" file="/var/log/siem/juniper-devices.log" template="NetworkDeviceFormat")
} else if $.device_vendor == "fortinet" then {
    action(type="omfile" file="/var/log/siem/fortinet-devices.log" template="NetworkDeviceFormat")
} else {
    action(type="omfile" file="/var/log/siem/other-devices.log" template="NetworkDeviceFormat")
}

# ═══════════════════════════════════════════════════════════════════════════════
# STATISTICS AND MONITORING
# ═══════════════════════════════════════════════════════════════════════════════

# Enable statistics
module(load="impstats" 
       interval="300" 
       severity="7" 
       log.syslog="off" 
       log.file="/var/log/rsyslog-stats.log")

# Rate limiting to prevent DoS
module(load="imuxsock" 
       SysSock.RateLimit.Interval="2" 
       SysSock.RateLimit.Burst="50000")

# EOF