version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: isectech-auth-db
    environment:
      POSTGRES_DB: isectech_auth
      POSTGRES_USER: isectech
      POSTGRES_PASSWORD: ${DB_PASSWORD:-development_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - isectech-auth
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U isectech -d isectech_auth']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: isectech-auth-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - isectech-auth
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-dev}
        COMMIT: ${COMMIT:-unknown}
        BUILD_TIME: ${BUILD_TIME:-unknown}
    container_name: isectech-auth-service
    ports:
      - '8080:8080'
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: isectech_auth
      DB_USER: isectech
      DB_PASSWORD: ${DB_PASSWORD:-development_password}

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}

      # Application configuration
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      JWT_SECRET: ${JWT_SECRET:-development_jwt_secret_key_32_chars_min}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev_encryption_key_32_chars_long}

      # HTTP configuration
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 8080

      # Email configuration (optional for development)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS:-noreply@isectech.dev}

      # SMS configuration (optional for development)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_FROM_NUMBER: ${TWILIO_FROM_NUMBER:-}

      # Security configuration
      THREAT_INTEL_API_KEY: ${THREAT_INTEL_API_KEY:-}
      RISK_PROVIDER_API_KEY: ${RISK_PROVIDER_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - isectech-auth
    volumes:
      - ./logs:/app/logs
      - ./templates:/app/templates
      - ./models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: isectech-auth-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/ssl/certs:ro
    depends_on:
      - auth-service
    networks:
      - isectech-auth
    restart: unless-stopped

networks:
  isectech-auth:
    driver: bridge
    name: isectech-auth-network

volumes:
  postgres_data:
    name: isectech-auth-postgres-data
  redis_data:
    name: isectech-auth-redis-data
