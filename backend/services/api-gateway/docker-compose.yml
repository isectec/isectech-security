# iSECTECH API Gateway - Docker Compose Development Environment
# Local development and testing configuration
# Author: Claude Code - iSECTECH Infrastructure Team
# Version: 2.0.0

version: '3.8'

services:
  # ═══════════════════════════════════════════════════════════════════════════════
  # API GATEWAY SERVICE
  # ═══════════════════════════════════════════════════════════════════════════════
  
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-2024-01-01T00:00:00Z}
        BUILD_VERSION: ${BUILD_VERSION:-v2.0.0-dev}
        BUILD_COMMIT: ${BUILD_COMMIT:-dev}
    image: isectech-api-gateway:dev
    container_name: isectech-api-gateway-dev
    hostname: api-gateway
    
    # Port mapping
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics endpoint
    
    # Environment variables
    environment:
      # Application configuration
      ENVIRONMENT: development
      SERVER_PORT: 8080
      LOG_LEVEL: debug
      LOG_FORMAT: console
      
      # Security configuration
      JWT_ENABLED: true
      JWT_SECRET: dev-jwt-secret-key-for-testing-only
      API_KEY_ENABLED: true
      SECURITY_REQUIRE_HTTPS: false
      SECURITY_REQUEST_SIZE_LIMIT: 10485760
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DATABASE: 0
      REDIS_POOL_SIZE: 10
      REDIS_MAX_RETRIES: 3
      
      # Database configuration (optional)
      DATABASE_ENABLED: true
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: isectech_gateway_dev
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: dev_password
      DATABASE_SSL_MODE: disable
      
      # Rate limiting
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_RPS: 100
      RATE_LIMIT_BURST: 200
      RATE_LIMIT_WINDOW: 60
      
      # CORS configuration
      CORS_ENABLED: true
      CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8080"
      CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      CORS_ALLOWED_HEADERS: "*"
      CORS_ALLOW_CREDENTIALS: true
      
      # Monitoring and observability
      MONITORING_ENABLED: true
      TRACING_ENABLED: false
      TRACING_SERVICE_NAME: isectech-api-gateway-dev
      
      # Performance settings
      SERVER_READ_TIMEOUT: 30
      SERVER_WRITE_TIMEOUT: 30
      SERVER_IDLE_TIMEOUT: 120
    
    # Volumes for development
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - /tmp:/app/tmp
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits (for development)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Networks
    networks:
      - isectech-network
    
    # Labels
    labels:
      - "com.isectech.service=api-gateway"
      - "com.isectech.environment=development"
      - "com.isectech.version=2.0.0"

  # ═══════════════════════════════════════════════════════════════════════════════
  # REDIS CACHE SERVICE
  # ═══════════════════════════════════════════════════════════════════════════════
  
  redis:
    image: redis:7.2.3-alpine3.18
    container_name: isectech-redis-dev
    hostname: redis
    
    # Port mapping
    ports:
      - "6379:6379"
    
    # Configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volumes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Networks
    networks:
      - isectech-network
    
    # Labels
    labels:
      - "com.isectech.service=redis"
      - "com.isectech.environment=development"

  # ═══════════════════════════════════════════════════════════════════════════════
  # POSTGRESQL DATABASE SERVICE
  # ═══════════════════════════════════════════════════════════════════════════════
  
  postgres:
    image: postgres:16.1-alpine3.18
    container_name: isectech-postgres-dev
    hostname: postgres
    
    # Port mapping
    ports:
      - "5432:5432"
    
    # Environment variables
    environment:
      POSTGRES_DB: isectech_gateway_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d isectech_gateway_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Networks
    networks:
      - isectech-network
    
    # Labels
    labels:
      - "com.isectech.service=postgres"
      - "com.isectech.environment=development"

  # ═══════════════════════════════════════════════════════════════════════════════
  # PROMETHEUS MONITORING (Optional)
  # ═══════════════════════════════════════════════════════════════════════════════
  
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: isectech-prometheus-dev
    hostname: prometheus
    
    # Port mapping
    ports:
      - "9090:9090"
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Networks
    networks:
      - isectech-network
    
    # Labels
    labels:
      - "com.isectech.service=prometheus"
      - "com.isectech.environment=development"
    
    # Dependencies
    depends_on:
      - api-gateway
    
    profiles:
      - monitoring

  # ═══════════════════════════════════════════════════════════════════════════════
  # GRAFANA DASHBOARD (Optional)
  # ═══════════════════════════════════════════════════════════════════════════════
  
  grafana:
    image: grafana/grafana:10.2.2
    container_name: isectech-grafana-dev
    hostname: grafana
    
    # Port mapping
    ports:
      - "3001:3000"
    
    # Environment variables
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Restart policy
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Networks
    networks:
      - isectech-network
    
    # Labels
    labels:
      - "com.isectech.service=grafana"
      - "com.isectech.environment=development"
    
    # Dependencies
    depends_on:
      - prometheus
    
    profiles:
      - monitoring

# ═══════════════════════════════════════════════════════════════════════════════
# NETWORKS
# ═══════════════════════════════════════════════════════════════════════════════

networks:
  isectech-network:
    driver: bridge
    name: isectech-network
    labels:
      - "com.isectech.network=development"

# ═══════════════════════════════════════════════════════════════════════════════
# VOLUMES
# ═══════════════════════════════════════════════════════════════════════════════

volumes:
  redis_data:
    driver: local
    labels:
      - "com.isectech.volume=redis-data"
  
  postgres_data:
    driver: local
    labels:
      - "com.isectech.volume=postgres-data"
  
  prometheus_data:
    driver: local
    labels:
      - "com.isectech.volume=prometheus-data"
  
  grafana_data:
    driver: local
    labels:
      - "com.isectech.volume=grafana-data"

# ═══════════════════════════════════════════════════════════════════════════════
# USAGE INSTRUCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Development commands:
# docker-compose up -d                    # Start all services
# docker-compose up api-gateway           # Start only API Gateway and dependencies
# docker-compose up --profile monitoring  # Start with monitoring stack
# docker-compose logs -f api-gateway      # View API Gateway logs
# docker-compose exec api-gateway sh      # Shell into API Gateway container
# docker-compose down                     # Stop all services
# docker-compose down -v                  # Stop and remove volumes

# Testing commands:
# curl http://localhost:8080/health        # Health check
# curl http://localhost:8080/metrics       # Prometheus metrics
# curl http://localhost:8080/api/status    # Service status
# 
# Access services:
# API Gateway: http://localhost:8080
# Prometheus:  http://localhost:9090
# Grafana:     http://localhost:3001 (admin/admin)
# Redis:       localhost:6379
# PostgreSQL:  localhost:5432