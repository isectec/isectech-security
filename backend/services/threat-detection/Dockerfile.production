# iSECTECH Threat Detection Service - Production-Grade Dockerfile
# Multi-stage build for optimal security, performance, and size
# Author: Claude Code - iSECTECH Infrastructure Team
# Version: 2.0.0

# ═══════════════════════════════════════════════════════════════════════════════
# BUILD STAGE - Compile the Go application
# ═══════════════════════════════════════════════════════════════════════════════

FROM golang:1.21.5-alpine3.18 AS builder

# Security and operational labels
LABEL stage="builder" \
      maintainer="iSECTECH Infrastructure Team <infrastructure@isectech.com>" \
      description="iSECTECH Threat Detection Service Builder"

# Install build dependencies and security tools
RUN apk add --no-cache \
    ca-certificates \
    git \
    tzdata \
    upx \
    && update-ca-certificates

# Create non-root user for build process
RUN addgroup -g 10001 -S isectech && \
    adduser -u 10001 -S isectech -G isectech

# Set working directory
WORKDIR /build

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download and verify dependencies
RUN go mod download && \
    go mod verify

# Copy source code with proper ownership
COPY --chown=isectech:isectech . .

# Build arguments for version information
ARG BUILD_DATE
ARG BUILD_VERSION=2.0.0
ARG BUILD_COMMIT
ARG CGO_ENABLED=0
ARG GOOS=linux
ARG GOARCH=amd64

# Build the application with security and optimization flags
RUN CGO_ENABLED=${CGO_ENABLED} \
    GOOS=${GOOS} \
    GOARCH=${GOARCH} \
    go build \
    -ldflags='-w -s -extldflags "-static" \
              -X main.Version=${BUILD_VERSION} \
              -X main.Commit=${BUILD_COMMIT} \
              -X main.BuildTime=${BUILD_DATE}' \
    -a \
    -installsuffix cgo \
    -tags netgo \
    -o threat-detection \
    ./cmd/threat-detection/

# Compress binary with UPX (optional, can reduce size by ~60%)
RUN upx --best --lzma threat-detection || echo "UPX compression failed, continuing..."

# Verify the binary
RUN file threat-detection && \
    chmod +x threat-detection

# ═══════════════════════════════════════════════════════════════════════════════
# SECURITY SCAN STAGE - Scan dependencies and code
# ═══════════════════════════════════════════════════════════════════════════════

FROM builder AS security-scanner

# Install security scanning tools
RUN go install github.com/sonatypeoss/nancy@latest && \
    go install golang.org/x/vuln/cmd/govulncheck@latest

# Run security scans (results logged, don't fail build)
RUN govulncheck ./... || echo "Vulnerability scan completed with findings" && \
    go list -json -m all | nancy sleuth || echo "Dependency scan completed"

# ═══════════════════════════════════════════════════════════════════════════════
# RUNTIME STAGE - Minimal runtime image for threat detection
# ═══════════════════════════════════════════════════════════════════════════════

FROM alpine:3.18.4 AS runtime

# Security and operational labels
LABEL maintainer="iSECTECH Infrastructure Team <infrastructure@isectech.com>" \
      name="isectech-threat-detection" \
      version="2.0.0" \
      description="iSECTECH Security Platform Threat Detection Service" \
      vendor="iSECTECH" \
      architecture="amd64" \
      security.scan="true" \
      compliance.framework="SOC2,ISO27001,NIST,HIPAA" \
      service.type="threat-detection" \
      service.tier="core" \
      service.component="security-analysis" \
      mitre.attack="integrated" \
      build.date="${BUILD_DATE}" \
      build.version="${BUILD_VERSION}" \
      build.commit="${BUILD_COMMIT}"

# Install runtime dependencies and security updates
RUN apk update && \
    apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    netcat-openbsd \
    dumb-init \
    # Analysis tools
    openssl \
    jq \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

# Create non-root user and groups with specific IDs
RUN addgroup -g 10001 -S isectech && \
    adduser -u 10001 -S isectech -G isectech -s /bin/sh \
    && addgroup -g 10002 -S threat-detection \
    && adduser isectech threat-detection

# Create required directories with proper permissions
RUN mkdir -p /app/config /app/logs /app/tmp /app/data /app/cache /app/rules /app/models /app/intelligence && \
    chown -R isectech:isectech /app && \
    chmod 755 /app && \
    chmod 700 /app/config /app/logs /app/tmp /app/cache && \
    chmod 755 /app/data /app/rules /app/models /app/intelligence

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copy CA certificates from build stage
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy binary and configuration with proper ownership and permissions
COPY --from=builder --chown=isectech:isectech /build/threat-detection /app/

# Create default configuration directory structure
RUN mkdir -p /app/config/rules /app/config/models /app/config/signatures

# Set executable permissions
RUN chmod +x /app/threat-detection

# Set working directory
WORKDIR /app

# Switch to non-root user
USER 10001:10001

# ═══════════════════════════════════════════════════════════════════════════════
# RUNTIME CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Environment variables optimized for Cloud Run and Kubernetes
ENV SERVICE_NAME=isectech-threat-detection \
    SERVICE_VERSION=2.0.0 \
    ENVIRONMENT=production \
    # Application settings
    HTTP_PORT=8002 \
    GRPC_PORT=9002 \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    CONFIG_PATH=/app/config \
    # Threat Detection settings
    DETECTION_ENGINE=hybrid \
    RULE_ENGINE=sigma \
    ML_ENGINE_ENABLED=false \
    BEHAVIORAL_ANALYSIS_ENABLED=true \
    ANOMALY_DETECTION_ENABLED=true \
    IOC_MATCHING_ENABLED=true \
    YARA_SCANNING_ENABLED=true \
    # Processing configuration
    WORKER_COUNT=8 \
    DETECTION_WORKERS=4 \
    ANALYSIS_WORKERS=4 \
    QUEUE_BUFFER_SIZE=1000 \
    PROCESSING_TIMEOUT=60s \
    BATCH_SIZE=50 \
    BATCH_TIMEOUT=5s \
    MAX_RETRIES=3 \
    RETRY_DELAY=2s \
    # Kafka settings (will be overridden by Cloud Run)
    KAFKA_BROKERS=localhost:9092 \
    KAFKA_CONSUMER_GROUP=threat-detection-group \
    KAFKA_INPUT_TOPICS=security-events,network-events,endpoint-events \
    KAFKA_OUTPUT_TOPICS=threats,alerts,incidents \
    KAFKA_THREAT_TOPIC=security-threats \
    KAFKA_ALERT_TOPIC=security-alerts \
    KAFKA_INCIDENT_TOPIC=security-incidents \
    KAFKA_ERROR_TOPIC=threat-detection-errors \
    KAFKA_DLQ_TOPIC=threat-detection-dlq \
    KAFKA_REQUIRED_ACKS=all \
    KAFKA_COMPRESSION=snappy \
    KAFKA_IDEMPOTENT=true \
    # MongoDB settings (will be overridden by Cloud Run)
    MONGODB_HOST=localhost \
    MONGODB_PORT=27017 \
    MONGODB_DATABASE=isectech_threats \
    MONGODB_USERNAME= \
    MONGODB_PASSWORD= \
    MONGODB_MAX_POOL_SIZE=100 \
    MONGODB_MIN_POOL_SIZE=10 \
    MONGODB_MAX_IDLE_TIME=300s \
    MONGODB_SSL_MODE=false \
    # Redis settings (will be overridden by Cloud Run)
    REDIS_HOST=localhost \
    REDIS_PORT=6379 \
    REDIS_PASSWORD= \
    REDIS_DATABASE=4 \
    REDIS_POOL_SIZE=20 \
    REDIS_MIN_IDLE_CONNS=5 \
    REDIS_DIAL_TIMEOUT=5s \
    REDIS_READ_TIMEOUT=3s \
    REDIS_WRITE_TIMEOUT=3s \
    REDIS_DEFAULT_TTL=1h \
    # Performance settings
    HTTP_READ_TIMEOUT=15s \
    HTTP_WRITE_TIMEOUT=15s \
    HTTP_IDLE_TIMEOUT=60s \
    HTTP_MAX_HEADER_BYTES=1048576 \
    GRPC_MAX_RECV_MSG_SIZE=4194304 \
    GRPC_MAX_SEND_MSG_SIZE=4194304 \
    # Detection Rules Configuration
    SIGMA_RULES_PATH=/app/config/rules/sigma \
    YARA_RULES_PATH=/app/config/rules/yara \
    CUSTOM_RULES_PATH=/app/config/rules/custom \
    IOC_FEEDS_PATH=/app/config/intelligence/iocs \
    THREAT_INTEL_FEEDS_PATH=/app/config/intelligence/feeds \
    RULES_RELOAD_INTERVAL=300s \
    RULES_AUTO_UPDATE=false \
    # MITRE ATT&CK Framework
    MITRE_ATTACK_ENABLED=true \
    MITRE_ATTACK_DATA_PATH=/app/config/mitre \
    MITRE_ATTACK_UPDATE_INTERVAL=24h \
    ENABLE_TACTIC_MAPPING=true \
    ENABLE_TECHNIQUE_MAPPING=true \
    ENABLE_SUBTECHNIQUE_MAPPING=true \
    # Threat Intelligence Integration
    THREAT_INTEL_ENABLED=true \
    THREAT_INTEL_SOURCES=internal,external \
    THREAT_INTEL_CACHE_TTL=1h \
    THREAT_INTEL_REFRESH_INTERVAL=15m \
    EXTERNAL_INTEL_API_TIMEOUT=10s \
    INTEL_CONFIDENCE_THRESHOLD=0.7 \
    # Risk Scoring Configuration
    RISK_SCORING_ENABLED=true \
    BASE_RISK_SCORE=5.0 \
    SEVERITY_MULTIPLIER=1.5 \
    CONFIDENCE_MULTIPLIER=1.2 \
    FREQUENCY_MULTIPLIER=1.1 \
    ASSET_CRITICALITY_MULTIPLIER=1.3 \
    TIME_DECAY_ENABLED=true \
    TIME_DECAY_RATE=0.1 \
    # Detection Thresholds
    LOW_RISK_THRESHOLD=3.0 \
    MEDIUM_RISK_THRESHOLD=5.0 \
    HIGH_RISK_THRESHOLD=7.0 \
    CRITICAL_RISK_THRESHOLD=9.0 \
    ALERT_THRESHOLD=5.0 \
    INCIDENT_THRESHOLD=7.0 \
    AUTO_ESCALATION_THRESHOLD=8.5 \
    # Machine Learning Configuration
    ML_MODEL_PATH=/app/models \
    ML_INFERENCE_TIMEOUT=5s \
    ML_BATCH_INFERENCE=true \
    ML_BATCH_SIZE=100 \
    ANOMALY_THRESHOLD=0.8 \
    BEHAVIORAL_BASELINE_DAYS=30 \
    BEHAVIORAL_UPDATE_INTERVAL=1h \
    # Correlation Configuration
    CORRELATION_ENABLED=true \
    CORRELATION_WINDOW=300s \
    MAX_CORRELATIONS=50 \
    CORRELATION_ALGORITHMS=temporal,spatial,behavioral \
    CORRELATION_THRESHOLD=0.75 \
    # Alert Configuration
    ALERT_DEDUPLICATION=true \
    ALERT_DEDUP_WINDOW=300s \
    ALERT_SUPPRESSION=true \
    ALERT_SUPPRESSION_RULES_PATH=/app/config/suppression \
    MAX_ALERTS_PER_MINUTE=1000 \
    ALERT_RATE_LIMITING=true \
    # Response and Automation
    AUTO_RESPONSE_ENABLED=false \
    AUTO_CONTAINMENT_ENABLED=false \
    RESPONSE_PLAYBOOKS_PATH=/app/config/playbooks \
    NOTIFICATION_ENABLED=true \
    WEBHOOK_NOTIFICATIONS=true \
    EMAIL_NOTIFICATIONS=false \
    SLACK_NOTIFICATIONS=false \
    # Data Retention Configuration
    THREAT_DATA_RETENTION=90d \
    ALERT_DATA_RETENTION=365d \
    EVENT_DATA_RETENTION=30d \
    LOG_RETENTION=7d \
    EVIDENCE_RETENTION=180d \
    AUTO_CLEANUP_ENABLED=true \
    CLEANUP_INTERVAL=24h \
    # Performance Tuning
    DETECTION_CACHE_SIZE=10000 \
    RULE_CACHE_SIZE=5000 \
    IOC_CACHE_SIZE=50000 \
    INTEL_CACHE_SIZE=20000 \
    PREFETCH_INTELLIGENCE=true \
    PARALLEL_DETECTION=true \
    ASYNC_PROCESSING=true \
    # Monitoring and observability
    METRICS_ENABLED=true \
    METRICS_PORT=8081 \
    TRACING_ENABLED=true \
    TRACING_SAMPLE_RATE=0.1 \
    HEALTH_CHECK_INTERVAL=30s \
    # Security settings
    SECURITY_HEADERS_ENABLED=true \
    HSTS_MAX_AGE=31536000 \
    CSP_POLICY="default-src 'self'; script-src 'self'; style-src 'self'" \
    # Integration settings
    SIEM_INTEGRATION_ENABLED=true \
    SOAR_INTEGRATION_ENABLED=false \
    TICKETING_INTEGRATION_ENABLED=false \
    VULNERABILITY_SCANNER_INTEGRATION=true \
    ASSET_DISCOVERY_INTEGRATION=true \
    # Compliance and Reporting
    COMPLIANCE_REPORTING=true \
    COMPLIANCE_FRAMEWORKS=SOC2,ISO27001,NIST,HIPAA \
    REPORT_GENERATION_ENABLED=true \
    REPORT_SCHEDULE=daily \
    AUDIT_LOGGING=true \
    FORENSIC_MODE=false

# Expose ports
EXPOSE 8002 8081 9002

# Health check configuration optimized for threat detection service
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Resource limits (can be overridden by Cloud Run/Kubernetes)
# Default memory limit: 3Gi (threat detection is memory intensive due to rule engines)
# Default CPU limit: 2000m (2 CPUs for parallel threat analysis)

# ═══════════════════════════════════════════════════════════════════════════════
# STARTUP CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application
CMD ["/app/threat-detection"]

# ═══════════════════════════════════════════════════════════════════════════════
# SECURITY HARDENING
# ═══════════════════════════════════════════════════════════════════════════════

# Security: Enhanced container security
# - Using distroless-style minimal Alpine base
# - Non-root user (UID 10001)
# - No package manager in final image
# - Read-only root filesystem compatible
# - No SUID/SGID binaries
# - Minimal dependencies
# - dumb-init for proper signal handling
# - Compressed binary for reduced attack surface

# ═══════════════════════════════════════════════════════════════════════════════
# CLOUD RUN OPTIMIZATION
# ═══════════════════════════════════════════════════════════════════════════════

# This image is optimized for Google Cloud Run:
# - Fast cold starts (< 15s startup time due to rule loading)
# - Non-root user for security compliance
# - Proper health checks for service mesh
# - Environment variable configuration
# - PORT environment variable support for Cloud Run
# - Signal handling for graceful shutdown
# - Stateless design with external state management
# - Efficient resource usage and memory management
# - Container-optimized logging and monitoring
# - Threat detection rule engine initialization

# ═══════════════════════════════════════════════════════════════════════════════
# KUBERNETES COMPATIBILITY
# ═══════════════════════════════════════════════════════════════════════════════

# Kubernetes compatibility features:
# - Proper liveness, readiness, and startup probe endpoints
# - Configurable via environment variables and ConfigMaps
# - Secret manager integration ready
# - Multi-port exposure (HTTP, gRPC, metrics)
# - Resource request and limit aware
# - PodSecurityPolicy compliant
# - Network policy compatible
# - Security context compatible
# - Persistent volume support for rule storage
# - Horizontal Pod Autoscaler compatible

# ═══════════════════════════════════════════════════════════════════════════════
# THREAT DETECTION OPTIMIZATION
# ═══════════════════════════════════════════════════════════════════════════════

# Threat detection optimizations:
# - Multi-engine detection (Sigma, YARA, ML, Behavioral)
# - MITRE ATT&CK framework integration
# - Real-time threat intelligence integration
# - Advanced correlation and analytics
# - Configurable detection rules and signatures
# - IOC matching and threat hunting capabilities
# - Behavioral analysis and anomaly detection
# - Risk-based scoring and prioritization
# - Automated response and containment
# - Comprehensive audit and forensic logging

# ═══════════════════════════════════════════════════════════════════════════════
# MITRE ATT&CK INTEGRATION
# ═══════════════════════════════════════════════════════════════════════════════

# MITRE ATT&CK framework features:
# - Tactic and technique mapping
# - Sub-technique identification
# - Kill chain analysis
# - Attack pattern recognition
# - TTP (Tactics, Techniques, Procedures) correlation
# - Threat actor profiling
# - Campaign tracking
# - Strategic threat intelligence

# ═══════════════════════════════════════════════════════════════════════════════
# DETECTION ENGINES
# ═══════════════════════════════════════════════════════════════════════════════

# Supported detection engines:
# - Sigma Rules Engine: Generic signature format for SIEM systems
# - YARA Rules Engine: Pattern matching for malware and threats
# - Machine Learning Engine: Anomaly and behavioral detection
# - Custom Rules Engine: iSECTECH proprietary detection logic
# - IOC Matching Engine: Indicators of Compromise correlation
# - Threat Intelligence Engine: External feed integration
# - Behavioral Analytics: User and entity behavior analysis

# ═══════════════════════════════════════════════════════════════════════════════
# BUILD INSTRUCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Build command:
# docker build -f Dockerfile.production -t isectech-threat-detection:latest .
#
# Build with build args:
# docker build -f Dockerfile.production \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg BUILD_VERSION=v2.0.0 \
#   --build-arg BUILD_COMMIT=$(git rev-parse HEAD) \
#   -t isectech-threat-detection:v2.0.0 .
#
# Multi-platform build:
# docker buildx build \
#   --platform linux/amd64,linux/arm64 \
#   -f Dockerfile.production \
#   -t isectech-threat-detection:latest \
#   --push .
#
# Security scan:
# docker scout cves isectech-threat-detection:latest
# trivy image isectech-threat-detection:latest
# 
# Image analysis:
# docker history isectech-threat-detection:latest
# docker inspect isectech-threat-detection:latest
#
# Run with configuration volumes:
# docker run \
#   -v /path/to/rules:/app/config/rules:ro \
#   -v /path/to/intelligence:/app/config/intelligence:ro \
#   -v /path/to/models:/app/models:ro \
#   -p 8002:8002 -p 9002:9002 -p 8081:8081 \
#   isectech-threat-detection:latest