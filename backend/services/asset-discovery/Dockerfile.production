# iSECTECH Asset Discovery Service - Production-Grade Dockerfile
# Multi-stage build for optimal security, performance, and size
# Author: Claude Code - iSECTECH Infrastructure Team
# Version: 2.0.0

# ═══════════════════════════════════════════════════════════════════════════════
# BUILD STAGE - Compile the Go application
# ═══════════════════════════════════════════════════════════════════════════════

FROM golang:1.21.5-alpine3.18 AS builder

# Security and operational labels
LABEL stage="builder" \
      maintainer="iSECTECH Infrastructure Team <infrastructure@isectech.com>" \
      description="iSECTECH Asset Discovery Service Builder"

# Install build dependencies and security tools
RUN apk add --no-cache \
    ca-certificates \
    git \
    tzdata \
    upx \
    && update-ca-certificates

# Create non-root user for build process
RUN addgroup -g 10001 -S isectech && \
    adduser -u 10001 -S isectech -G isectech

# Set working directory
WORKDIR /build

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download and verify dependencies
RUN go mod download && \
    go mod verify

# Copy source code with proper ownership
COPY --chown=isectech:isectech . .

# Build arguments for version information
ARG BUILD_DATE
ARG BUILD_VERSION=2.0.0
ARG BUILD_COMMIT
ARG CGO_ENABLED=0
ARG GOOS=linux
ARG GOARCH=amd64

# Build the application with security and optimization flags
RUN CGO_ENABLED=${CGO_ENABLED} \
    GOOS=${GOOS} \
    GOARCH=${GOARCH} \
    go build \
    -ldflags='-w -s -extldflags "-static" \
              -X main.Version=${BUILD_VERSION} \
              -X main.Commit=${BUILD_COMMIT} \
              -X main.BuildTime=${BUILD_DATE}' \
    -a \
    -installsuffix cgo \
    -tags netgo \
    -o asset-discovery \
    ./cmd/asset-discovery/

# Compress binary with UPX (optional, can reduce size by ~60%)
RUN upx --best --lzma asset-discovery || echo "UPX compression failed, continuing..."

# Verify the binary
RUN file asset-discovery && \
    chmod +x asset-discovery

# ═══════════════════════════════════════════════════════════════════════════════
# SECURITY SCAN STAGE - Scan dependencies and code
# ═══════════════════════════════════════════════════════════════════════════════

FROM builder AS security-scanner

# Install security scanning tools
RUN go install github.com/sonatypeoss/nancy@latest && \
    go install golang.org/x/vuln/cmd/govulncheck@latest

# Run security scans (results logged, don't fail build)
RUN govulncheck ./... || echo "Vulnerability scan completed with findings" && \
    go list -json -m all | nancy sleuth || echo "Dependency scan completed"

# ═══════════════════════════════════════════════════════════════════════════════
# RUNTIME STAGE - Minimal runtime image with network scanning tools
# ═══════════════════════════════════════════════════════════════════════════════

FROM alpine:3.18.4 AS runtime

# Security and operational labels
LABEL maintainer="iSECTECH Infrastructure Team <infrastructure@isectech.com>" \
      name="isectech-asset-discovery" \
      version="2.0.0" \
      description="iSECTECH Security Platform Asset Discovery Service" \
      vendor="iSECTECH" \
      architecture="amd64" \
      security.scan="true" \
      compliance.framework="SOC2,ISO27001,NIST,HIPAA" \
      service.type="asset-discovery" \
      service.tier="core" \
      service.component="network-scanning" \
      build.date="${BUILD_DATE}" \
      build.version="${BUILD_VERSION}" \
      build.commit="${BUILD_COMMIT}"

# Install runtime dependencies, network scanning tools, and security updates
RUN apk update && \
    apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    netcat-openbsd \
    dumb-init \
    # Network scanning and discovery tools (required for asset discovery)
    nmap \
    nmap-scripts \
    nmap-nse \
    masscan \
    bind-tools \
    iputils \
    net-tools \
    tcpdump \
    arp-scan \
    # Additional security tools
    openssl \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

# Create non-root user and groups with specific IDs
RUN addgroup -g 10001 -S isectech && \
    adduser -u 10001 -S isectech -G isectech -s /bin/sh \
    && addgroup -g 10002 -S asset-discovery \
    && adduser isectech asset-discovery

# Create required directories with proper permissions
RUN mkdir -p /app/config /app/logs /app/tmp /app/data /app/cache /app/scans /app/reports /app/migrations && \
    chown -R isectech:isectech /app && \
    chmod 755 /app && \
    chmod 700 /app/config /app/logs /app/tmp /app/cache /app/scans && \
    chmod 755 /app/data /app/reports /app/migrations

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copy CA certificates from build stage
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy binary and configuration with proper ownership and permissions
COPY --from=builder --chown=isectech:isectech /build/asset-discovery /app/
COPY --from=builder --chown=isectech:isectech /build/config.yaml /app/config/config.yaml

# Set executable permissions
RUN chmod +x /app/asset-discovery

# Set working directory
WORKDIR /app

# Switch to non-root user
USER 10001:10001

# ═══════════════════════════════════════════════════════════════════════════════
# RUNTIME CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Environment variables optimized for Cloud Run and Kubernetes
ENV SERVICE_NAME=isectech-asset-discovery \
    SERVICE_VERSION=2.0.0 \
    ENVIRONMENT=production \
    # Application settings
    HTTP_PORT=8080 \
    GRPC_PORT=9090 \
    METRICS_PORT=2112 \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    CONFIG_FILE=/app/config/config.yaml \
    # Asset Discovery settings
    SCAN_CONCURRENCY=10 \
    SCAN_TIMEOUT=300s \
    SCAN_RETRY_COUNT=3 \
    SCAN_RETRY_DELAY=5s \
    DISCOVERY_INTERVAL=3600s \
    ENABLE_NETWORK_DISCOVERY=true \
    ENABLE_CLOUD_DISCOVERY=true \
    ENABLE_PASSIVE_DISCOVERY=true \
    ENABLE_ACTIVE_SCANNING=true \
    # Network Scanning configuration
    NMAP_SCAN_TECHNIQUE=SYN \
    NMAP_PORT_RANGE=1-65535 \
    NMAP_TIMING_TEMPLATE=T4 \
    NMAP_HOST_TIMEOUT=300s \
    NMAP_MAX_RETRIES=2 \
    NMAP_MIN_RATE=100 \
    NMAP_MAX_RATE=1000 \
    MASSCAN_RATE=1000 \
    MASSCAN_EXCLUDE_FILE=/app/config/exclude.conf \
    # Discovery scopes and filters
    DISCOVERY_NETWORKS=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 \
    EXCLUDE_NETWORKS=169.254.0.0/16,224.0.0.0/4 \
    DISCOVERY_PORTS=21,22,23,25,53,80,110,111,135,139,143,443,993,995,1723,3306,3389,5432,5900,8080,8443 \
    ENABLE_SERVICE_DETECTION=true \
    ENABLE_OS_DETECTION=false \
    ENABLE_VULNERABILITY_SCANNING=false \
    # PostgreSQL settings (will be overridden by Cloud Run)
    DB_HOST=localhost \
    DB_PORT=5432 \
    DB_NAME=isectech_assets \
    DB_SCHEMA=asset_discovery \
    DB_USERNAME=asset_discovery \
    DB_PASSWORD= \
    DB_MAX_OPEN_CONNS=25 \
    DB_MAX_IDLE_CONNS=5 \
    DB_CONN_MAX_LIFETIME=300s \
    DB_CONN_MAX_IDLE_TIME=300s \
    DB_SSL_MODE=require \
    # Redis settings (will be overridden by Cloud Run)
    REDIS_HOST=localhost \
    REDIS_PORT=6379 \
    REDIS_PASSWORD= \
    REDIS_DATABASE=3 \
    REDIS_POOL_SIZE=10 \
    REDIS_MIN_IDLE_CONNS=2 \
    REDIS_DIAL_TIMEOUT=5s \
    REDIS_READ_TIMEOUT=3s \
    REDIS_WRITE_TIMEOUT=3s \
    REDIS_IDLE_TIMEOUT=300s \
    # Performance settings
    HTTP_READ_TIMEOUT=15s \
    HTTP_WRITE_TIMEOUT=15s \
    HTTP_IDLE_TIMEOUT=60s \
    HTTP_MAX_HEADER_BYTES=1048576 \
    GRPC_MAX_RECV_MSG_SIZE=4194304 \
    GRPC_MAX_SEND_MSG_SIZE=4194304 \
    # Asset enrichment configuration
    ENABLE_ASSET_ENRICHMENT=true \
    ENABLE_GEOLOCATION_ENRICHMENT=true \
    ENABLE_WHOIS_ENRICHMENT=true \
    ENABLE_DNS_ENRICHMENT=true \
    ENABLE_SSL_CERTIFICATE_ANALYSIS=true \
    ENABLE_BANNER_GRABBING=true \
    ENRICHMENT_TIMEOUT=10s \
    ENRICHMENT_CACHE_TTL=1h \
    # Rate limiting and throttling
    SCAN_RATE_LIMIT=1000 \
    SCAN_BURST_LIMIT=100 \
    API_RATE_LIMIT=100 \
    API_BURST_LIMIT=20 \
    ENABLE_SCAN_THROTTLING=true \
    THROTTLE_THRESHOLD=80 \
    # Data retention and cleanup
    SCAN_HISTORY_RETENTION=90d \
    ASSET_DATA_RETENTION=365d \
    LOG_RETENTION=30d \
    ENABLE_AUTO_CLEANUP=true \
    CLEANUP_INTERVAL=24h \
    # Monitoring and observability
    METRICS_ENABLED=true \
    TRACING_ENABLED=true \
    TRACING_SAMPLE_RATE=0.1 \
    HEALTH_CHECK_INTERVAL=30s \
    # Security settings
    SECURITY_HEADERS_ENABLED=true \
    HSTS_MAX_AGE=31536000 \
    CSP_POLICY="default-src 'self'; script-src 'self'; style-src 'self'" \
    ENABLE_SCAN_VALIDATION=true \
    VALIDATE_SCAN_TARGETS=true \
    BLOCK_PRIVATE_RANGES=false \
    BLOCK_RESERVED_RANGES=true \
    # Integration settings
    ENABLE_SIEM_INTEGRATION=true \
    ENABLE_VULNERABILITY_FEED=true \
    ENABLE_THREAT_INTELLIGENCE=true \
    SIEM_ENDPOINT= \
    VULNERABILITY_FEED_URL= \
    THREAT_INTEL_API_KEY= \
    # Cloud provider integrations
    ENABLE_AWS_DISCOVERY=false \
    ENABLE_AZURE_DISCOVERY=false \
    ENABLE_GCP_DISCOVERY=false \
    AWS_REGIONS= \
    AZURE_SUBSCRIPTIONS= \
    GCP_PROJECTS=

# Expose ports
EXPOSE 8080 9090 2112

# Health check configuration optimized for asset discovery service
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Resource limits (can be overridden by Cloud Run/Kubernetes)
# Default memory limit: 1.5Gi (network scanning can be memory intensive)
# Default CPU limit: 1500m (1.5 CPUs for scanning operations)

# ═══════════════════════════════════════════════════════════════════════════════
# STARTUP CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application with configuration file
CMD ["/app/asset-discovery"]

# ═══════════════════════════════════════════════════════════════════════════════
# SECURITY HARDENING
# ═══════════════════════════════════════════════════════════════════════════════

# Security: Enhanced container security
# - Using distroless-style minimal Alpine base
# - Non-root user (UID 10001)
# - No package manager in final image
# - Read-only root filesystem compatible
# - No SUID/SGID binaries
# - Minimal dependencies
# - dumb-init for proper signal handling
# - Compressed binary for reduced attack surface
# - Network scanning tools properly configured

# ═══════════════════════════════════════════════════════════════════════════════
# CLOUD RUN OPTIMIZATION
# ═══════════════════════════════════════════════════════════════════════════════

# This image is optimized for Google Cloud Run:
# - Fast cold starts (< 10s startup time due to network tool initialization)
# - Non-root user for security compliance
# - Proper health checks for service mesh
# - Environment variable configuration
# - PORT environment variable support for Cloud Run
# - Signal handling for graceful shutdown
# - Stateless design with external state management
# - Efficient resource usage and memory management
# - Container-optimized logging and monitoring
# - Network scanning capabilities for asset discovery

# ═══════════════════════════════════════════════════════════════════════════════
# KUBERNETES COMPATIBILITY
# ═══════════════════════════════════════════════════════════════════════════════

# Kubernetes compatibility features:
# - Proper liveness, readiness, and startup probe endpoints
# - Configurable via environment variables and ConfigMaps
# - Secret manager integration ready
# - Multi-port exposure (HTTP, gRPC, metrics)
# - Resource request and limit aware
# - PodSecurityPolicy compliant
# - Network policy compatible
# - Security context compatible
# - Persistent volume support for scan data

# ═══════════════════════════════════════════════════════════════════════════════
# NETWORK SCANNING OPTIMIZATION
# ═══════════════════════════════════════════════════════════════════════════════

# Network scanning optimizations:
# - Nmap and Masscan for comprehensive port scanning
# - DNS tools for name resolution and reverse lookups
# - SSL/TLS analysis tools for certificate inspection
# - ARP scanning for local network discovery
# - TCP dump for traffic analysis
# - Rate limiting to prevent network congestion
# - Scan result caching for efficiency
# - Configurable scan profiles and templates
# - Support for scan exclusion lists
# - Integration with vulnerability databases

# ═══════════════════════════════════════════════════════════════════════════════
# SECURITY CONSIDERATIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Security considerations for network scanning:
# - Non-privileged user mode (capabilities may need to be added via Kubernetes)
# - Scan target validation to prevent abuse
# - Rate limiting to prevent DoS
# - Audit logging of all scan activities
# - Secure configuration of scanning tools
# - Network policy enforcement
# - Scan result encryption at rest
# - API authentication and authorization
# - Compliance with network security policies

# ═══════════════════════════════════════════════════════════════════════════════
# BUILD INSTRUCTIONS
# ═══════════════════════════════════════════════════════════════════════════════

# Build command:
# docker build -f Dockerfile.production -t isectech-asset-discovery:latest .
#
# Build with build args:
# docker build -f Dockerfile.production \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg BUILD_VERSION=v2.0.0 \
#   --build-arg BUILD_COMMIT=$(git rev-parse HEAD) \
#   -t isectech-asset-discovery:v2.0.0 .
#
# Multi-platform build:
# docker buildx build \
#   --platform linux/amd64,linux/arm64 \
#   -f Dockerfile.production \
#   -t isectech-asset-discovery:latest \
#   --push .
#
# Security scan:
# docker scout cves isectech-asset-discovery:latest
# trivy image isectech-asset-discovery:latest
# 
# Image analysis:
# docker history isectech-asset-discovery:latest
# docker inspect isectech-asset-discovery:latest
#
# Run with network capabilities (if required for advanced scanning):
# docker run --cap-add=NET_RAW --cap-add=NET_ADMIN \
#   -p 8080:8080 -p 9090:9090 -p 2112:2112 \
#   isectech-asset-discovery:latest