// iSECTECH Vulnerability Scanner - Scanner Service Interfaces
// Production-grade scanner abstraction for multiple vulnerability scanning engines
// Copyright (c) 2024 iSECTECH. All rights reserved.

package service

import (
	"context"
	"io"
	"time"

	"github.com/google/uuid"

	"github.com/isectech/backend/services/vulnerability-scanner/domain/entity"
)

// VulnerabilityScanner defines the interface that all scanner implementations must satisfy
type VulnerabilityScanner interface {
	// Scanner identification and metadata
	GetName() string
	GetType() ScannerType
	GetVersion() string
	GetSupportedScanTypes() []entity.ScanType
	GetCapabilities() []string
	IsEnabled() bool
	IsHealthy() bool

	// Configuration and lifecycle
	Initialize(ctx context.Context, config ScannerConfiguration) error
	Validate(ctx context.Context, scanConfig entity.ScannerConfig) error
	Shutdown(ctx context.Context) error
	GetHealth(ctx context.Context) (*ScannerHealth, error)

	// Scan execution
	StartScan(ctx context.Context, scan *entity.Scan) (*ScanExecution, error)
	MonitorScan(ctx context.Context, executionID uuid.UUID) (*ScanProgress, error)
	PauseScan(ctx context.Context, executionID uuid.UUID) error
	ResumeScan(ctx context.Context, executionID uuid.UUID) error
	CancelScan(ctx context.Context, executionID uuid.UUID) error
	GetScanResults(ctx context.Context, executionID uuid.UUID) (*ScanResults, error)

	// Result processing
	ParseResults(ctx context.Context, resultData io.Reader, format string) ([]*entity.Vulnerability, error)
	NormalizeVulnerability(ctx context.Context, rawVuln interface{}) (*entity.Vulnerability, error)
	ValidateResults(ctx context.Context, vulnerabilities []*entity.Vulnerability) ([]ValidationResult, error)

	// Scanner-specific operations
	GetScanProfiles(ctx context.Context) ([]ScanProfile, error)
	GetPlugins(ctx context.Context) ([]PluginInfo, error)
	UpdatePlugins(ctx context.Context) error
	GetCredentialRequirements(ctx context.Context, scanType entity.ScanType) ([]CredentialRequirement, error)

	// Reporting and export
	GenerateReport(ctx context.Context, executionID uuid.UUID, format ReportFormat) (io.Reader, error)
	ExportResults(ctx context.Context, executionID uuid.UUID, format ExportFormat) (io.Reader, error)
}

// NetworkScanner extends VulnerabilityScanner for network-specific operations
type NetworkScanner interface {
	VulnerabilityScanner

	// Network discovery
	DiscoverHosts(ctx context.Context, networks []string) ([]HostInfo, error)
	ScanPorts(ctx context.Context, hosts []string, ports []string) ([]PortInfo, error)
	DetectServices(ctx context.Context, hosts []string) ([]ServiceInfo, error)
	FingerprintOS(ctx context.Context, hosts []string) ([]OSInfo, error)

	// Network-specific vulnerability detection
	ScanNetworkVulnerabilities(ctx context.Context, targets []NetworkTarget) ([]*entity.Vulnerability, error)
	CheckSSLTLS(ctx context.Context, hosts []string, ports []string) ([]*entity.Vulnerability, error)
	ScanSMB(ctx context.Context, hosts []string) ([]*entity.Vulnerability, error)
	ScanRDP(ctx context.Context, hosts []string) ([]*entity.Vulnerability, error)
}

// WebScanner extends VulnerabilityScanner for web application scanning
type WebScanner interface {
	VulnerabilityScanner

	// Web application discovery
	SpiderApplication(ctx context.Context, baseURL string, config SpiderConfig) ([]URLInfo, error)
	DiscoverEndpoints(ctx context.Context, baseURL string) ([]EndpointInfo, error)
	DetectTechnology(ctx context.Context, url string) (*TechnologyStack, error)

	// Web vulnerability scanning
	ScanWebVulnerabilities(ctx context.Context, targets []WebTarget) ([]*entity.Vulnerability, error)
	TestSQLInjection(ctx context.Context, endpoints []EndpointInfo) ([]*entity.Vulnerability, error)
	TestXSS(ctx context.Context, endpoints []EndpointInfo) ([]*entity.Vulnerability, error)
	TestCSRF(ctx context.Context, endpoints []EndpointInfo) ([]*entity.Vulnerability, error)
	TestAuthentication(ctx context.Context, endpoints []EndpointInfo) ([]*entity.Vulnerability, error)
	TestAuthorization(ctx context.Context, endpoints []EndpointInfo) ([]*entity.Vulnerability, error)

	// Authentication and session management
	Authenticate(ctx context.Context, authConfig AuthenticationConfig) (*SessionInfo, error)
	MaintainSession(ctx context.Context, session *SessionInfo) error
}

// ContainerScanner extends VulnerabilityScanner for container and image scanning
type ContainerScanner interface {
	VulnerabilityScanner

	// Container and image operations
	ScanImage(ctx context.Context, imageRef string) ([]*entity.Vulnerability, error)
	ScanContainer(ctx context.Context, containerID string) ([]*entity.Vulnerability, error)
	ScanRegistry(ctx context.Context, registryURL string, images []string) ([]*entity.Vulnerability, error)

	// Container-specific analysis
	AnalyzeSecrets(ctx context.Context, imageRef string) ([]*entity.Vulnerability, error)
	CheckCompliance(ctx context.Context, imageRef string, benchmark string) ([]*entity.Vulnerability, error)
	ScanLayers(ctx context.Context, imageRef string) ([]LayerInfo, error)
	GetSBOM(ctx context.Context, imageRef string) (*SBOM, error)
}

// CloudScanner extends VulnerabilityScanner for cloud infrastructure scanning
type CloudScanner interface {
	VulnerabilityScanner

	// Cloud resource discovery
	DiscoverResources(ctx context.Context, provider string, regions []string) ([]CloudResource, error)
	GetResourceConfiguration(ctx context.Context, resourceID string) (interface{}, error)

	// Cloud security scanning
	ScanCloudConfiguration(ctx context.Context, resources []CloudResource) ([]*entity.Vulnerability, error)
	CheckIAMPolicies(ctx context.Context, provider string) ([]*entity.Vulnerability, error)
	ScanNetworkSecurity(ctx context.Context, provider string, regions []string) ([]*entity.Vulnerability, error)
	CheckEncryption(ctx context.Context, resources []CloudResource) ([]*entity.Vulnerability, error)
	ScanLogging(ctx context.Context, provider string) ([]*entity.Vulnerability, error)

	// Compliance scanning
	RunComplianceBenchmark(ctx context.Context, provider, benchmark string) ([]*entity.Vulnerability, error)
	GetComplianceFrameworks(ctx context.Context) ([]ComplianceFramework, error)
}

// CodeScanner extends VulnerabilityScanner for source code scanning
type CodeScanner interface {
	VulnerabilityScanner

	// Code analysis
	ScanSourceCode(ctx context.Context, repoPath string, languages []string) ([]*entity.Vulnerability, error)
	ScanDependencies(ctx context.Context, repoPath string) ([]*entity.Vulnerability, error)
	CheckSecrets(ctx context.Context, repoPath string) ([]*entity.Vulnerability, error)
	AnalyzeLicenses(ctx context.Context, repoPath string) ([]LicenseInfo, error)

	// Code quality and security
	RunSAST(ctx context.Context, repoPath string, config SASTConfig) ([]*entity.Vulnerability, error)
	RunDAST(ctx context.Context, applicationURL string, config DASTConfig) ([]*entity.Vulnerability, error)
	RunIAST(ctx context.Context, config IASTConfig) ([]*entity.Vulnerability, error)

	// Repository management
	CloneRepository(ctx context.Context, repoURL string, credentials interface{}) (string, error)
	GetSupportedLanguages(ctx context.Context) ([]string, error)
}

// ScannerType represents the type of scanner
type ScannerType string

const (
	ScannerTypeNetwork   ScannerType = "network"
	ScannerTypeWeb       ScannerType = "web"
	ScannerTypeContainer ScannerType = "container"
	ScannerTypeCloud     ScannerType = "cloud"
	ScannerTypeCode      ScannerType = "code"
	ScannerTypeDatabase  ScannerType = "database"
	ScannerTypeAgent     ScannerType = "agent"
	ScannerTypeComposite ScannerType = "composite"
)

// ScannerConfiguration holds scanner configuration
type ScannerConfiguration struct {
	Name            string                 `json:"name"`
	Type            ScannerType            `json:"type"`
	Enabled         bool                   `json:"enabled"`
	Priority        int                    `json:"priority"`
	ConcurrentScans int                    `json:"concurrent_scans"`
	Settings        map[string]interface{} `json:"settings"`
	Credentials     map[string]interface{} `json:"credentials"`
	Performance     PerformanceSettings    `json:"performance"`
	Logging         LoggingSettings        `json:"logging"`
	Integration     IntegrationSettings    `json:"integration"`
}

// PerformanceSettings controls scanner performance
type PerformanceSettings struct {
	MaxConcurrency  int            `json:"max_concurrency"`
	Timeout         time.Duration  `json:"timeout"`
	RetryCount      int            `json:"retry_count"`
	BackoffStrategy string         `json:"backoff_strategy"`
	RateLimit       int            `json:"rate_limit"`
	ResourceLimits  ResourceLimits `json:"resource_limits"`
	QueueSize       int            `json:"queue_size"`
}

// ResourceLimits defines resource constraints
type ResourceLimits struct {
	CPULimit     float64 `json:"cpu_limit"`
	MemoryLimit  int64   `json:"memory_limit"`
	NetworkLimit int64   `json:"network_limit"`
	StorageLimit int64   `json:"storage_limit"`
}

// LoggingSettings controls scanner logging
type LoggingSettings struct {
	Level          string `json:"level"`
	Format         string `json:"format"`
	OutputFile     string `json:"output_file,omitempty"`
	MaxFileSize    int64  `json:"max_file_size"`
	MaxBackups     int    `json:"max_backups"`
	RotationPeriod string `json:"rotation_period"`
}

// IntegrationSettings controls external integrations
type IntegrationSettings struct {
	AssetService    ServiceEndpoint `json:"asset_service"`
	ThreatIntel     ServiceEndpoint `json:"threat_intel"`
	TicketingSystem ServiceEndpoint `json:"ticketing_system"`
	NotificationURL string          `json:"notification_url,omitempty"`
	WebhookSecret   string          `json:"webhook_secret,omitempty"`
}

// ServiceEndpoint represents an external service endpoint
type ServiceEndpoint struct {
	URL        string            `json:"url"`
	APIKey     string            `json:"api_key,omitempty"`
	Headers    map[string]string `json:"headers,omitempty"`
	Timeout    time.Duration     `json:"timeout"`
	RetryCount int               `json:"retry_count"`
}

// ScannerHealth represents scanner health status
type ScannerHealth struct {
	Status         HealthStatus            `json:"status"`
	Version        string                  `json:"version"`
	Uptime         time.Duration           `json:"uptime"`
	LastScanTime   time.Time               `json:"last_scan_time"`
	ActiveScans    int                     `json:"active_scans"`
	QueuedScans    int                     `json:"queued_scans"`
	TotalScans     int                     `json:"total_scans"`
	SuccessRate    float64                 `json:"success_rate"`
	AverageTime    time.Duration           `json:"average_time"`
	ResourceUsage  ResourceUsage           `json:"resource_usage"`
	DatabaseStatus DatabaseStatus          `json:"database_status"`
	PluginStatus   map[string]HealthStatus `json:"plugin_status"`
	Issues         []HealthIssue           `json:"issues,omitempty"`
}

// HealthStatus represents health status values
type HealthStatus string

const (
	HealthStatusHealthy   HealthStatus = "healthy"
	HealthStatusDegraded  HealthStatus = "degraded"
	HealthStatusUnhealthy HealthStatus = "unhealthy"
	HealthStatusUnknown   HealthStatus = "unknown"
)

// ResourceUsage represents current resource usage
type ResourceUsage struct {
	CPUPercent    float64 `json:"cpu_percent"`
	MemoryBytes   int64   `json:"memory_bytes"`
	MemoryPercent float64 `json:"memory_percent"`
	DiskBytes     int64   `json:"disk_bytes"`
	NetworkBytes  int64   `json:"network_bytes"`
	OpenFiles     int     `json:"open_files"`
	Goroutines    int     `json:"goroutines"`
}

// DatabaseStatus represents database connectivity status
type DatabaseStatus struct {
	Connected      bool          `json:"connected"`
	ResponseTime   time.Duration `json:"response_time"`
	ConnectionPool int           `json:"connection_pool"`
	QueueSize      int           `json:"queue_size"`
	LastError      string        `json:"last_error,omitempty"`
}

// HealthIssue represents a health issue
type HealthIssue struct {
	Code       string    `json:"code"`
	Message    string    `json:"message"`
	Severity   string    `json:"severity"`
	Component  string    `json:"component"`
	Timestamp  time.Time `json:"timestamp"`
	Resolution string    `json:"resolution,omitempty"`
}

// ScanExecution represents an active scan execution
type ScanExecution struct {
	ID            uuid.UUID              `json:"id"`
	ScanID        uuid.UUID              `json:"scan_id"`
	Scanner       string                 `json:"scanner"`
	Status        entity.ScanStatus      `json:"status"`
	StartedAt     time.Time              `json:"started_at"`
	Progress      float64                `json:"progress"`
	CurrentTarget string                 `json:"current_target"`
	ProcessID     int                    `json:"process_id,omitempty"`
	LogFile       string                 `json:"log_file,omitempty"`
	ResultsFile   string                 `json:"results_file,omitempty"`
	Metadata      map[string]interface{} `json:"metadata,omitempty"`
}

// ScanProgress represents scan execution progress
type ScanProgress struct {
	ExecutionID     uuid.UUID           `json:"execution_id"`
	Progress        float64             `json:"progress"`
	CurrentTarget   string              `json:"current_target"`
	TargetsComplete int                 `json:"targets_complete"`
	TargetsTotal    int                 `json:"targets_total"`
	ElapsedTime     time.Duration       `json:"elapsed_time"`
	EstimatedTime   time.Duration       `json:"estimated_time"`
	Status          entity.ScanStatus   `json:"status"`
	LastUpdate      time.Time           `json:"last_update"`
	Statistics      ExecutionStatistics `json:"statistics"`
}

// ExecutionStatistics represents real-time scan statistics
type ExecutionStatistics struct {
	RequestsSent      int     `json:"requests_sent"`
	ResponsesReceived int     `json:"responses_received"`
	ErrorsEncountered int     `json:"errors_encountered"`
	VulnsFound        int     `json:"vulns_found"`
	CurrentRate       float64 `json:"current_rate"`
	AverageRate       float64 `json:"average_rate"`
}

// ScanResults represents processed scan results
type ScanResults struct {
	ExecutionID     uuid.UUID               `json:"execution_id"`
	Vulnerabilities []*entity.Vulnerability `json:"vulnerabilities"`
	Summary         ResultSummary           `json:"summary"`
	Statistics      entity.ScanStatistics   `json:"statistics"`
	Performance     entity.ScanPerformance  `json:"performance"`
	RawResults      []RawResult             `json:"raw_results,omitempty"`
	ProcessedAt     time.Time               `json:"processed_at"`
}

// ResultSummary represents a summary of scan results
type ResultSummary struct {
	TotalVulnerabilities int     `json:"total_vulnerabilities"`
	CriticalCount        int     `json:"critical_count"`
	HighCount            int     `json:"high_count"`
	MediumCount          int     `json:"medium_count"`
	LowCount             int     `json:"low_count"`
	InfoCount            int     `json:"info_count"`
	RiskScore            float64 `json:"risk_score"`
	ComplianceScore      float64 `json:"compliance_score"`
	TargetsScanned       int     `json:"targets_scanned"`
	NewFindings          int     `json:"new_findings"`
	FalsePositives       int     `json:"false_positives"`
}

// RawResult represents raw scanner output
type RawResult struct {
	Scanner   string                 `json:"scanner"`
	Plugin    string                 `json:"plugin,omitempty"`
	Target    string                 `json:"target"`
	Finding   map[string]interface{} `json:"finding"`
	Timestamp time.Time              `json:"timestamp"`
}

// ValidationResult represents result validation outcome
type ValidationResult struct {
	VulnID      string    `json:"vuln_id"`
	Valid       bool      `json:"valid"`
	Confidence  float64   `json:"confidence"`
	Issues      []string  `json:"issues,omitempty"`
	Suggestions []string  `json:"suggestions,omitempty"`
	ValidatedAt time.Time `json:"validated_at"`
}

// ScanProfile represents a predefined scan configuration
type ScanProfile struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description string                 `json:"description"`
	Type        entity.ScanType        `json:"type"`
	Settings    map[string]interface{} `json:"settings"`
	Plugins     []string               `json:"plugins"`
	Enabled     bool                   `json:"enabled"`
	Default     bool                   `json:"default"`
	CreatedAt   time.Time              `json:"created_at"`
	UpdatedAt   time.Time              `json:"updated_at"`
}

// PluginInfo represents scanner plugin information
type PluginInfo struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Version     string    `json:"version"`
	Description string    `json:"description"`
	Category    string    `json:"category"`
	Severity    string    `json:"severity,omitempty"`
	CVE         []string  `json:"cve,omitempty"`
	Enabled     bool      `json:"enabled"`
	UpdatedAt   time.Time `json:"updated_at"`
	Size        int64     `json:"size,omitempty"`
}

// CredentialRequirement represents credential requirements
type CredentialRequirement struct {
	Type        string   `json:"type"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Required    bool     `json:"required"`
	Fields      []string `json:"fields"`
	Example     string   `json:"example,omitempty"`
}

// ReportFormat represents report output formats
type ReportFormat string

const (
	ReportFormatHTML ReportFormat = "html"
	ReportFormatPDF  ReportFormat = "pdf"
	ReportFormatXML  ReportFormat = "xml"
	ReportFormatJSON ReportFormat = "json"
	ReportFormatCSV  ReportFormat = "csv"
)

// ExportFormat represents export output formats
type ExportFormat string

const (
	ExportFormatJSON  ExportFormat = "json"
	ExportFormatXML   ExportFormat = "xml"
	ExportFormatCSV   ExportFormat = "csv"
	ExportFormatSARIF ExportFormat = "sarif"
	ExportFormatSTIX  ExportFormat = "stix"
)

// Network-specific types

// HostInfo represents discovered host information
type HostInfo struct {
	IPAddress    string        `json:"ip_address"`
	Hostname     string        `json:"hostname,omitempty"`
	MACAddress   string        `json:"mac_address,omitempty"`
	Status       string        `json:"status"`
	OS           string        `json:"os,omitempty"`
	LastSeen     time.Time     `json:"last_seen"`
	ResponseTime time.Duration `json:"response_time"`
}

// PortInfo represents port scan information
type PortInfo struct {
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Protocol string `json:"protocol"`
	State    string `json:"state"`
	Service  string `json:"service,omitempty"`
	Version  string `json:"version,omitempty"`
	Banner   string `json:"banner,omitempty"`
}

// ServiceInfo represents detected service information
type ServiceInfo struct {
	Host       string `json:"host"`
	Port       int    `json:"port"`
	Protocol   string `json:"protocol"`
	Service    string `json:"service"`
	Version    string `json:"version,omitempty"`
	Product    string `json:"product,omitempty"`
	ExtraInfo  string `json:"extra_info,omitempty"`
	Confidence int    `json:"confidence"`
}

// OSInfo represents operating system fingerprint
type OSInfo struct {
	Host     string `json:"host"`
	OS       string `json:"os"`
	Version  string `json:"version,omitempty"`
	Accuracy int    `json:"accuracy"`
	CPE      string `json:"cpe,omitempty"`
	Vendor   string `json:"vendor,omitempty"`
	Family   string `json:"family,omitempty"`
}

// NetworkTarget represents network scan target
type NetworkTarget struct {
	Network     string   `json:"network"`
	Ports       []string `json:"ports,omitempty"`
	Protocols   []string `json:"protocols,omitempty"`
	Credentials []string `json:"credentials,omitempty"`
}

// Web-specific types

// SpiderConfig represents web spidering configuration
type SpiderConfig struct {
	MaxDepth        int           `json:"max_depth"`
	MaxPages        int           `json:"max_pages"`
	IncludePatterns []string      `json:"include_patterns,omitempty"`
	ExcludePatterns []string      `json:"exclude_patterns,omitempty"`
	FollowRedirects bool          `json:"follow_redirects"`
	Timeout         time.Duration `json:"timeout"`
	UserAgent       string        `json:"user_agent,omitempty"`
}

// URLInfo represents discovered URL information
type URLInfo struct {
	URL         string            `json:"url"`
	Method      string            `json:"method"`
	Parameters  []string          `json:"parameters,omitempty"`
	Headers     map[string]string `json:"headers,omitempty"`
	StatusCode  int               `json:"status_code"`
	ContentType string            `json:"content_type,omitempty"`
	Size        int64             `json:"size"`
	Title       string            `json:"title,omitempty"`
}

// EndpointInfo represents web application endpoint
type EndpointInfo struct {
	URL           string            `json:"url"`
	Method        string            `json:"method"`
	Parameters    []ParameterInfo   `json:"parameters,omitempty"`
	Headers       map[string]string `json:"headers,omitempty"`
	Cookies       map[string]string `json:"cookies,omitempty"`
	ContentType   string            `json:"content_type,omitempty"`
	Authenticated bool              `json:"authenticated"`
}

// ParameterInfo represents parameter information
type ParameterInfo struct {
	Name     string `json:"name"`
	Type     string `json:"type"`
	Location string `json:"location"` // query, body, header, cookie
	Required bool   `json:"required"`
	Example  string `json:"example,omitempty"`
}

// TechnologyStack represents detected technology stack
type TechnologyStack struct {
	Server     []Technology `json:"server,omitempty"`
	Framework  []Technology `json:"framework,omitempty"`
	Language   []Technology `json:"language,omitempty"`
	Database   []Technology `json:"database,omitempty"`
	JavaScript []Technology `json:"javascript,omitempty"`
	CMS        []Technology `json:"cms,omitempty"`
	WebServer  []Technology `json:"web_server,omitempty"`
	Analytics  []Technology `json:"analytics,omitempty"`
	Security   []Technology `json:"security,omitempty"`
}

// Technology represents a detected technology
type Technology struct {
	Name       string `json:"name"`
	Version    string `json:"version,omitempty"`
	Confidence int    `json:"confidence"`
	CPE        string `json:"cpe,omitempty"`
}

// WebTarget represents web application target
type WebTarget struct {
	URL         string                 `json:"url"`
	Credentials []AuthenticationConfig `json:"credentials,omitempty"`
	Scope       []string               `json:"scope,omitempty"`
	Headers     map[string]string      `json:"headers,omitempty"`
}

// AuthenticationConfig represents authentication configuration
type AuthenticationConfig struct {
	Type     string            `json:"type"`
	URL      string            `json:"url,omitempty"`
	Username string            `json:"username,omitempty"`
	Password string            `json:"password,omitempty"`
	Headers  map[string]string `json:"headers,omitempty"`
	Cookies  map[string]string `json:"cookies,omitempty"`
	Script   string            `json:"script,omitempty"`
}

// SessionInfo represents authentication session
type SessionInfo struct {
	ID        string            `json:"id"`
	Token     string            `json:"token,omitempty"`
	Cookies   map[string]string `json:"cookies,omitempty"`
	Headers   map[string]string `json:"headers,omitempty"`
	ExpiresAt time.Time         `json:"expires_at"`
	LastUsed  time.Time         `json:"last_used"`
	Valid     bool              `json:"valid"`
}

// Container-specific types

// LayerInfo represents container layer information
type LayerInfo struct {
	ID              string    `json:"id"`
	Size            int64     `json:"size"`
	CreatedBy       string    `json:"created_by"`
	CreatedAt       time.Time `json:"created_at"`
	Digest          string    `json:"digest"`
	MediaType       string    `json:"media_type"`
	Vulnerabilities int       `json:"vulnerabilities"`
}

// SBOM represents Software Bill of Materials
type SBOM struct {
	Format      string      `json:"format"`
	Version     string      `json:"version"`
	Components  []Component `json:"components"`
	GeneratedAt time.Time   `json:"generated_at"`
}

// Component represents SBOM component
type Component struct {
	Name         string   `json:"name"`
	Version      string   `json:"version"`
	Type         string   `json:"type"`
	Supplier     string   `json:"supplier,omitempty"`
	License      string   `json:"license,omitempty"`
	Hash         string   `json:"hash,omitempty"`
	PURL         string   `json:"purl,omitempty"`
	CPE          string   `json:"cpe,omitempty"`
	Dependencies []string `json:"dependencies,omitempty"`
}

// Cloud-specific types

// CloudResource represents cloud resource
type CloudResource struct {
	ID        string            `json:"id"`
	Type      string            `json:"type"`
	Name      string            `json:"name"`
	Region    string            `json:"region"`
	Provider  string            `json:"provider"`
	Tags      map[string]string `json:"tags,omitempty"`
	Config    interface{}       `json:"config,omitempty"`
	CreatedAt time.Time         `json:"created_at"`
	UpdatedAt time.Time         `json:"updated_at"`
}

// ComplianceFramework represents compliance framework
type ComplianceFramework struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Version     string   `json:"version"`
	Description string   `json:"description"`
	Controls    []string `json:"controls"`
	Provider    string   `json:"provider"`
}

// Code-specific types

// LicenseInfo represents license information
type LicenseInfo struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	SPDX        string `json:"spdx,omitempty"`
	URL         string `json:"url,omitempty"`
	Commercial  bool   `json:"commercial"`
	Copyleft    bool   `json:"copyleft"`
	OSIApproved bool   `json:"osi_approved"`
}

// SASTConfig represents SAST configuration
type SASTConfig struct {
	Languages  []string               `json:"languages"`
	Rules      []string               `json:"rules,omitempty"`
	Exclusions []string               `json:"exclusions,omitempty"`
	Severity   string                 `json:"severity,omitempty"`
	Settings   map[string]interface{} `json:"settings,omitempty"`
}

// DASTConfig represents DAST configuration
type DASTConfig struct {
	BaseURL        string                 `json:"base_url"`
	Scope          []string               `json:"scope,omitempty"`
	Exclusions     []string               `json:"exclusions,omitempty"`
	Authentication AuthenticationConfig   `json:"authentication,omitempty"`
	Settings       map[string]interface{} `json:"settings,omitempty"`
}

// IASTConfig represents IAST configuration
type IASTConfig struct {
	ApplicationID string                 `json:"application_id"`
	Agent         map[string]interface{} `json:"agent,omitempty"`
	Settings      map[string]interface{} `json:"settings,omitempty"`
}
