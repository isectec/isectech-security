version: '3.8'

services:
  # MongoDB for document storage
  mongodb:
    image: mongo:7.0
    container_name: isectech-mongodb
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: isectech
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - isectech-dev

  # Redis for caching and sessions
  redis:
    image: redis:7.2-alpine
    container_name: isectech-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - isectech-dev

  # PostgreSQL for relational data
  postgres:
    image: postgres:16-alpine
    container_name: isectech-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: isectech
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: isectech
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - isectech-dev

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: isectech-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - isectech-dev

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: isectech-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - isectech-dev

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: isectech-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - isectech-dev

  # Consul for service discovery
  consul:
    image: consul:1.17
    container_name: isectech-consul
    restart: unless-stopped
    ports:
      - '8500:8500'
      - '8600:8600/udp'
    command: >
      consul agent -dev -ui -node=dev-node -client=0.0.0.0
      -log-level=INFO
    volumes:
      - consul_data:/consul/data
    networks:
      - isectech-dev

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: isectech-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - isectech-dev

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: isectech-grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - isectech-dev

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: isectech-jaeger
    restart: unless-stopped
    ports:
      - '16686:16686' # Jaeger UI
      - '14268:14268' # HTTP collector
      - '14250:14250' # gRPC collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    volumes:
      - jaeger_data:/badger
    networks:
      - isectech-dev

  # Elasticsearch for log aggregation and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: isectech-elasticsearch
    restart: unless-stopped
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - isectech-dev

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: isectech-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - isectech-dev

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: isectech-minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - isectech-dev

  # Vault for secrets management
  vault:
    image: vault:1.15
    container_name: isectech-vault
    restart: unless-stopped
    ports:
      - '8200:8200'
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-only-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - isectech-dev

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  consul_data:
  prometheus_data:
  grafana_data:
  jaeger_data:
  elasticsearch_data:
  minio_data:

networks:
  isectech-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
