# iSECTECH Cybersecurity Platform - Production CI/CD Pipeline
# Comprehensive pipeline for security-first development workflow

name: 'iSECTECH CI/CD Pipeline'

on:
  push:
    branches: 
      - main
      - develop
      - 'release/*'
      - 'hotfix/*'
  pull_request:
    branches: 
      - main
      - develop
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deployments only)'
        required: false
        default: false
        type: boolean
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - rolling

# Global environment variables for security and consistency
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18.x'
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'
  SECURITY_SCAN_TIMEOUT: '300'
  BUILD_TIMEOUT: '600'
  
# Concurrency control to prevent overlapping deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # ═══════════════════════════════════════════════════════════════════════════════
  # PIPELINE VALIDATION AND SETUP
  # ═══════════════════════════════════════════════════════════════════════════════
  
  pipeline-setup:
    name: 'Pipeline Setup & Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      deployment-needed: ${{ steps.changes.outputs.deployment-needed }}
      environment: ${{ steps.env-selector.outputs.environment }}
      strategy: ${{ steps.strategy-selector.outputs.strategy }}
      security-critical: ${{ steps.security-check.outputs.critical }}
      components-changed: ${{ steps.changes.outputs.components }}
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 'Detect Changes'
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'next.config.js'
              - 'package.json'
              - 'package-lock.json'
            backend:
              - 'backend/**'
              - 'api/**'
              - 'go.mod'
              - 'go.sum'
            ai-services:
              - 'ai-services/**'
              - 'requirements.txt'
              - 'Pipfile'
            infrastructure:
              - 'infrastructure/**'
              - 'terraform/**'
              - 'k8s/**'
              - 'Dockerfile*'
            security:
              - 'security/**'
              - '__tests__/security/**'
              - '.github/workflows/**'
            docs:
              - 'docs/**'
              - '*.md'
              - 'CLAUDE.md'
        
      - name: 'Environment Selection'
        id: env-selector
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ refs/heads/release/.* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
        
      - name: 'Deployment Strategy Selection'
        id: strategy-selector
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "strategy=${{ github.event.inputs.deployment_strategy }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.env-selector.outputs.environment }}" == "production" ]]; then
            echo "strategy=blue-green" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.env-selector.outputs.environment }}" == "staging" ]]; then
            echo "strategy=canary" >> $GITHUB_OUTPUT
          else
            echo "strategy=rolling" >> $GITHUB_OUTPUT
          fi
        
      - name: 'Security Critical Assessment'
        id: security-check
        run: |
          if [[ "${{ steps.changes.outputs.security }}" == "true" ]] || 
             [[ "${{ steps.changes.outputs.backend }}" == "true" ]] ||
             [[ "${{ steps.changes.outputs.infrastructure }}" == "true" ]]; then
            echo "critical=true" >> $GITHUB_OUTPUT
            echo "::notice::Security-critical changes detected - enhanced scanning enabled"
          else
            echo "critical=false" >> $GITHUB_OUTPUT
          fi
        
      - name: 'Set Deployment Flag'
        id: deployment-flag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] ||
             [[ "${{ github.ref }}" == "refs/heads/main" ]] ||
             [[ "${{ github.ref }}" == "refs/heads/develop" ]] ||
             [[ "${{ github.ref }}" =~ refs/heads/release/.* ]] ||
             [[ "${{ github.ref }}" =~ refs/heads/hotfix/.* ]]; then
            echo "deployment-needed=true" >> $GITHUB_OUTPUT
          else
            echo "deployment-needed=false" >> $GITHUB_OUTPUT
          fi

  # ═══════════════════════════════════════════════════════════════════════════════
  # SECURITY AND COMPLIANCE GATES
  # ═══════════════════════════════════════════════════════════════════════════════
  
  security-gates:
    name: 'Security & Compliance Gates'
    runs-on: ubuntu-latest
    needs: pipeline-setup
    timeout-minutes: 10
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Branch Protection Validation'
        run: |
          echo "::group::Branch Protection Validation"
          
          # Validate branch naming conventions
          if [[ "${{ github.ref }}" =~ refs/heads/feature/.* ]] ||
             [[ "${{ github.ref }}" =~ refs/heads/bugfix/.* ]] ||
             [[ "${{ github.ref }}" =~ refs/heads/hotfix/.* ]] ||
             [[ "${{ github.ref }}" =~ refs/heads/release/.* ]] ||
             [[ "${{ github.ref }}" == "refs/heads/main" ]] ||
             [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "✅ Branch naming convention validated"
          else
            echo "❌ Invalid branch naming convention"
            exit 1
          fi
          
          echo "::endgroup::"
      
      - name: 'Commit Message Validation'
        run: |
          echo "::group::Commit Message Validation"
          
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Validate conventional commit format
          if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|security|perf|ci|build)(\(.+\))?: .{1,50}"; then
            echo "✅ Commit message format validated"
          else
            echo "⚠️  Commit message doesn't follow conventional format"
            echo "Expected: type(scope): description"
            echo "Actual: $COMMIT_MSG"
          fi
          
          # Check for security-related keywords
          if echo "$COMMIT_MSG" | grep -qiE "(security|vulnerability|cve|exploit|patch|auth|encryption)"; then
            echo "🔒 Security-related commit detected"
            echo "security-commit=true" >> $GITHUB_ENV
          fi
          
          echo "::endgroup::"
      
      - name: 'Secrets Scanning'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: 'File Security Validation'
        run: |
          echo "::group::File Security Validation"
          
          # Check for sensitive files
          SENSITIVE_FILES=$(find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name ".env" -o -name "*.env" \) ! -path "./.git/*" || true)
          
          if [[ -n "$SENSITIVE_FILES" ]]; then
            echo "❌ Sensitive files detected:"
            echo "$SENSITIVE_FILES"
            exit 1
          else
            echo "✅ No sensitive files detected"
          fi
          
          # Check for large files
          LARGE_FILES=$(find . -type f -size +50M ! -path "./.git/*" || true)
          
          if [[ -n "$LARGE_FILES" ]]; then
            echo "⚠️  Large files detected (>50MB):"
            echo "$LARGE_FILES"
          else
            echo "✅ No large files detected"
          fi
          
          echo "::endgroup::"

  # ═══════════════════════════════════════════════════════════════════════════════
  # BUILD MATRIX JOBS (Will be expanded in Task 54.2)
  # ═══════════════════════════════════════════════════════════════════════════════
  
  build-matrix:
    name: 'Build Matrix Setup'
    runs-on: ubuntu-latest
    needs: [pipeline-setup, security-gates]
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    
    steps:
      - name: 'Generate Build Matrix'
        id: matrix
        run: |
          # Dynamic matrix based on changed components
          MATRIX='{"include":[]}'
          
          if [[ "${{ needs.pipeline-setup.outputs.components-changed }}" =~ "frontend" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"component": "frontend", "language": "nodejs", "dockerfile": "Dockerfile.frontend"}]')
          fi
          
          if [[ "${{ needs.pipeline-setup.outputs.components-changed }}" =~ "backend" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"component": "backend", "language": "go", "dockerfile": "Dockerfile.backend"}]')
          fi
          
          if [[ "${{ needs.pipeline-setup.outputs.components-changed }}" =~ "ai-services" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"component": "ai-services", "language": "python", "dockerfile": "Dockerfile.ai"}]')
          fi
          
          # Always include infrastructure if any deployment-related changes
          if [[ "${{ needs.pipeline-setup.outputs.deployment-needed }}" == "true" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"component": "infrastructure", "language": "terraform", "dockerfile": ""}]')
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX"

  # ═══════════════════════════════════════════════════════════════════════════════
  # NOTIFICATION AND AUDIT LOGGING
  # ═══════════════════════════════════════════════════════════════════════════════
  
  audit-logging:
    name: 'Pipeline Audit Logging'
    runs-on: ubuntu-latest
    needs: [pipeline-setup, security-gates]
    if: always()
    
    steps:
      - name: 'Log Pipeline Execution'
        run: |
          echo "::group::Pipeline Audit Log"
          
          cat << EOF > pipeline-audit.json
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "pipeline_id": "${{ github.run_id }}",
            "pipeline_number": "${{ github.run_number }}",
            "trigger": "${{ github.event_name }}",
            "actor": "${{ github.actor }}",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "environment": "${{ needs.pipeline-setup.outputs.environment }}",
            "deployment_strategy": "${{ needs.pipeline-setup.outputs.strategy }}",
            "security_critical": "${{ needs.pipeline-setup.outputs.security-critical }}",
            "components_changed": "${{ needs.pipeline-setup.outputs.components-changed }}",
            "security_gates_status": "${{ needs.security-gates.result }}",
            "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          
          echo "Audit log created:"
          cat pipeline-audit.json
          
          echo "::endgroup::"
      
      - name: 'Upload Audit Log'
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-audit-log
          path: pipeline-audit.json
          retention-days: 90

  # ═══════════════════════════════════════════════════════════════════════════════
  # PIPELINE STATUS SUMMARY
  # ═══════════════════════════════════════════════════════════════════════════════
  
  pipeline-status:
    name: 'Pipeline Status Summary'
    runs-on: ubuntu-latest
    needs: [pipeline-setup, security-gates, build-matrix, audit-logging]
    if: always()
    
    steps:
      - name: 'Generate Status Summary'
        run: |
          echo "::group::Pipeline Status Summary"
          
          echo "🏗️  **iSECTECH CI/CD Pipeline Status**"
          echo ""
          echo "**Pipeline Information:**"
          echo "- Run ID: ${{ github.run_id }}"
          echo "- Environment: ${{ needs.pipeline-setup.outputs.environment }}"
          echo "- Strategy: ${{ needs.pipeline-setup.outputs.strategy }}"
          echo "- Security Critical: ${{ needs.pipeline-setup.outputs.security-critical }}"
          echo ""
          echo "**Job Status:**"
          echo "- Pipeline Setup: ${{ needs.pipeline-setup.result }}"
          echo "- Security Gates: ${{ needs.security-gates.result }}"
          echo "- Build Matrix: ${{ needs.build-matrix.result }}"
          echo "- Audit Logging: ${{ needs.audit-logging.result }}"
          echo ""
          echo "**Next Steps:**"
          if [[ "${{ needs.security-gates.result }}" == "success" ]]; then
            echo "✅ Ready for build and test phases"
          else
            echo "❌ Security gates failed - review required"
          fi
          
          echo "::endgroup::"