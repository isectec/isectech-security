name: üîí iSECTECH Protect - Comprehensive Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  FORCE_COLOR: true

jobs:
  # Security and dependency auditing
  security-audit:
    name: üõ°Ô∏è Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency vulnerability check
        run: npx better-npm-audit audit

  # Code quality and linting
  code-quality:
    name: üìù Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check .

  # Unit and integration tests
  unit-tests:
    name: üß™ Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-suite }} tests
        run: npm run test:${{ matrix.test-suite }} -- --coverage --watchAll=false
        env:
          NODE_ENV: test
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # Accessibility testing
  accessibility-tests:
    name: ‚ôø Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Pa11y accessibility tests
        run: npm run test:accessibility

      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-report
          path: pa11y-ci-report.json

  # End-to-end tests with Playwright
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  # Performance testing with Lighthouse
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse tests
        run: npm run test:lighthouse
        env:
          LIGHTHOUSE_URL: http://localhost:3000

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-reports
          path: test-results/lighthouse-*.html

  # Visual regression testing
  visual-tests:
    name: üëÅÔ∏è Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: npm run test:visual
        env:
          CI: true

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-diffs
          path: test-results/

  # Component testing with Storybook
  component-tests:
    name: üìö Component Tests (Storybook)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Run Storybook tests
        run: npx test-storybook
        env:
          NODE_ENV: test

      - name: Deploy Storybook to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static

  # Build verification
  build-verification:
    name: üî® Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for ${{ matrix.environment }}
        run: npm run build
        env:
          NODE_ENV: ${{ matrix.environment }}

      - name: Verify build artifacts
        run: |
          test -d .next
          test -f .next/package.json
          ls -la .next/static/

      - name: Test application startup
        run: |
          timeout 30s npm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1

  # Security-specific testing
  security-testing:
    name: üîê Security Testing
    runs-on: ubuntu-latest
    needs: [build-verification]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run security-focused tests
        run: npm run test:security

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Final verification
  test-summary:
    name: ‚úÖ Test Summary
    runs-on: ubuntu-latest
    needs:
      - security-audit
      - code-quality
      - unit-tests
      - accessibility-tests
      - e2e-tests
      - performance-tests
      - visual-tests
      - component-tests
      - build-verification
      - security-testing
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Accessibility Tests: ${{ needs.accessibility-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Visual Tests: ${{ needs.visual-tests.result }}"
          echo "Component Tests: ${{ needs.component-tests.result }}"
          echo "Build Verification: ${{ needs.build-verification.result }}"
          echo "Security Testing: ${{ needs.security-testing.result }}"

      - name: Fail if any tests failed
        if: |
          needs.security-audit.result == 'failure' ||
          needs.code-quality.result == 'failure' ||
          needs.unit-tests.result == 'failure' ||
          needs.accessibility-tests.result == 'failure' ||
          needs.e2e-tests.result == 'failure' ||
          needs.performance-tests.result == 'failure' ||
          needs.visual-tests.result == 'failure' ||
          needs.component-tests.result == 'failure' ||
          needs.build-verification.result == 'failure' ||
          needs.security-testing.result == 'failure'
        run: exit 1

      - name: All tests passed
        run: echo "üéâ All tests passed successfully!"
