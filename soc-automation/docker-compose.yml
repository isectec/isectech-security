version: '3.8'

services:
  # Alert Ingestion Service
  alert-ingestion:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: soc-alert-ingestion
    ports:
      - "8001:8001"
    environment:
      # Elasticsearch Configuration
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
      - ELASTICSEARCH_INDEX_PREFIX=soc-alerts
      - ELASTICSEARCH_RETENTION_DAYS=90
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      
      # Processing Configuration
      - PROCESSING_MAX_WORKERS=10
      - PROCESSING_BATCH_SIZE=100
      - PROCESSING_MAX_QUEUE_SIZE=10000
      - DEDUPLICATION_WINDOW=3600
      
      # Connector Configuration (disabled by default)
      - SIEM_ENABLED=false
      - SIEM_TYPE=splunk
      - SIEM_BASE_URL=
      - SIEM_USERNAME=
      - SIEM_PASSWORD=
      - SIEM_API_KEY=
      - SIEM_QUERY_INTERVAL=60
      
      - EDR_ENABLED=false
      - EDR_TYPE=crowdstrike
      - EDR_BASE_URL=
      - EDR_CLIENT_ID=
      - EDR_CLIENT_SECRET=
      - EDR_API_KEY=
      - EDR_POLLING_INTERVAL=30
    depends_on:
      - elasticsearch
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - soc-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Elasticsearch for alert storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: soc-elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=soc-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - es_logs:/usr/share/elasticsearch/logs
    ports:
      - "9200:9200"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:changeme -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - soc-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and deduplication
  redis:
    image: redis:7-alpine
    container_name: soc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - soc-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Kibana for visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: soc-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - soc-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: soc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - soc-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: soc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=changeme
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - soc-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  es_data:
    driver: local
  es_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  soc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16