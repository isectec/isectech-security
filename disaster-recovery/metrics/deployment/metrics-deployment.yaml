# iSECTECH RTO/RPO Metrics System Deployment
# Kubernetes deployment for the RTO/RPO monitoring service

apiVersion: v1
kind: Namespace
metadata:
  name: isectech-monitoring
  labels:
    app.kubernetes.io/name: isectech-monitoring
    app.kubernetes.io/instance: isectech
    security.isectech.com/zone: monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rto-rpo-config
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
data:
  config.json: |
    {
      "timestream": {
        "region": "us-east-1",
        "database": "isectech_disaster_recovery",
        "table": "rto_rpo_metrics"
      },
      "cloudwatch": {
        "region": "us-east-1",
        "namespace": "iSECTECH/DisasterRecovery"
      },
      "prometheus": {
        "pushgateway_url": "http://prometheus-pushgateway.isectech-monitoring.svc.cluster.local:9091"
      },
      "monitoring": {
        "metrics_interval_seconds": 30,
        "compliance_check_interval_seconds": 60,
        "report_generation_interval_seconds": 3600
      },
      "notifications": {
        "slack_webhook_url": "${SLACK_WEBHOOK_URL}",
        "email_smtp_host": "smtp.isectech.com",
        "email_from": "dr-alerts@isectech.com"
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: rto-rpo-secrets
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
type: Opaque
data:
  # These should be base64 encoded values
  aws-access-key-id: ""
  aws-secret-access-key: ""
  slack-webhook-url: ""
  smtp-password: ""

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
    app.kubernetes.io/component: monitoring
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rto-rpo-monitor
      app.kubernetes.io/instance: isectech
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rto-rpo-monitor
        app.kubernetes.io/instance: isectech
        app.kubernetes.io/component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rto-rpo-monitor
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: rto-rpo-monitor
          image: isectech/rto-rpo-monitor:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: CONFIG_PATH
              value: "/etc/config/config.json"
            - name: AWS_REGION
              value: "us-east-1"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: rto-rpo-secrets
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: rto-rpo-secrets
                  key: aws-secret-access-key
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: rto-rpo-secrets
                  key: slack-webhook-url
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rto-rpo-secrets
                  key: smtp-password
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: data
              mountPath: /data
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: config
          configMap:
            name: rto-rpo-config
        - name: data
          emptyDir: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: rto-rpo-monitor
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 9090
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/rto-rpo-monitor-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rto-rpo-monitor
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["monitoring.coreos.com"]
    resources: ["servicemonitors", "prometheusrules"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rto-rpo-monitor
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rto-rpo-monitor
subjects:
  - kind: ServiceAccount
    name: rto-rpo-monitor
    namespace: isectech-monitoring

---
# Service Monitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: rto-rpo-monitor
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      scheme: http

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rto-rpo-monitor
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rto-rpo-monitor

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rto-rpo-monitor
  namespace: isectech-monitoring
  labels:
    app.kubernetes.io/name: rto-rpo-monitor
    app.kubernetes.io/instance: isectech
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rto-rpo-monitor
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: isectech-monitoring
        - namespaceSelector:
            matchLabels:
              name: prometheus-operator
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow HTTPS to AWS APIs
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow access to Prometheus Pushgateway
    - to:
        - namespaceSelector:
            matchLabels:
              name: isectech-monitoring
      ports:
        - protocol: TCP
          port: 9091
    # Allow SMTP for email notifications
    - to: []
      ports:
        - protocol: TCP
          port: 587