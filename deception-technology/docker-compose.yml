services:
  # PostgreSQL Database for storing decoy data and canary tokens
  postgres:
    image: postgres:15-alpine
    container_name: deception-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: deception
      POSTGRES_USER: deception_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_deception_pass_123}
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/seed-data.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    ports:
      - "5432:5432"
    networks:
      - deception-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deception_user -d deception"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: deception-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis_deception_pass_456}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - deception-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Decoy Services Manager
  decoy-services:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: deception-services
    restart: unless-stopped
    environment:
      NODE_ENV: production
      SERVICE_TYPE: decoy
      PORT: 3001
      DECOY_DATABASE_URL: postgresql://deception_user:${POSTGRES_PASSWORD:-secure_deception_pass_123}@postgres:5432/deception
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_deception_pass_456}@redis:6379/0
      DECEPTION_ALERT_WEBHOOK: ${ALERT_WEBHOOK:-https://webhook.site/unique-id}
      JWT_SECRET: ${JWT_SECRET:-decoy_jwt_secret_key_789}
      LOG_LEVEL: info
    ports:
      - "3001:3001"  # Decoy services
      - "9091:9090"  # Metrics
    volumes:
      - decoy_logs:/app/logs
      - decoy_tokens:/app/tokens
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - deception-network
    healthcheck:
      test: ["CMD", "./health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Canary Token Manager
  canary-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: canary-token-manager
    restart: unless-stopped
    environment:
      NODE_ENV: production
      SERVICE_TYPE: canary
      PORT: 3002
      DATABASE_URL: postgresql://deception_user:${POSTGRES_PASSWORD:-secure_deception_pass_123}@postgres:5432/deception
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_deception_pass_456}@redis:6379/1
      DECEPTION_ALERT_WEBHOOK: ${ALERT_WEBHOOK:-https://webhook.site/unique-id}
      CANARY_DOMAIN: ${CANARY_DOMAIN:-canary.isectech.local}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-webhook_secret_key_012}
    ports:
      - "3002:3002"  # Canary token API
      - "9092:9090"  # Metrics
    volumes:
      - canary_logs:/app/logs
      - canary_data:/app/tokens
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - deception-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: deception-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - decoy-services
      - canary-manager
    networks:
      - deception-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: deception-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - decoy-services
      - canary-manager
    networks:
      - deception-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: deception-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_admin_pass}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-grafana.isectech.local}
      GF_SERVER_ROOT_URL: https://${GRAFANA_DOMAIN:-grafana.isectech.local}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - deception-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Token Deployment Job (run once to deploy tokens)
  token-deployer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: token-deployer
    environment:
      NODE_ENV: production
      SERVICE_TYPE: deploy
      DATABASE_URL: postgresql://deception_user:${POSTGRES_PASSWORD:-secure_deception_pass_123}@postgres:5432/deception
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_deception_pass_456}@redis:6379/2
      DECEPTION_ALERT_WEBHOOK: ${ALERT_WEBHOOK:-https://webhook.site/unique-id}
      CANARY_DOMAIN: ${CANARY_DOMAIN:-canary.isectech.local}
    volumes:
      - deployment_logs:/app/logs
      - deployment_reports:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      canary-manager:
        condition: service_healthy
    networks:
      - deception-network
    profiles:
      - deploy
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregation with Fluentd
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile
    container_name: deception-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - decoy_logs:/app/logs/decoy:ro
      - canary_logs:/app/logs/canary:ro
      - nginx_logs:/app/logs/nginx:ro
      - fluentd_logs:/var/log/fluentd
    ports:
      - "24224:24224"
    depends_on:
      - decoy-services
      - canary-manager
    networks:
      - deception-network
    profiles:
      - logging
    security_opt:
      - no-new-privileges:true

networks:
  deception-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  decoy_logs:
    driver: local
  canary_logs:
    driver: local
  canary_data:
    driver: local
  decoy_tokens:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  deployment_logs:
    driver: local
  deployment_reports:
    driver: local
  fluentd_logs:
    driver: local

# Additional compose files can be used for different environments:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up