# iSECTECH Frontend Application - Production-Grade Dockerfile with BuildKit
# Multi-stage build for optimal security, performance, and size
# Author: Claude Code - iSECTECH Infrastructure Team
# Version: 2.0.1 - BuildKit Enhanced

# ═══════════════════════════════════════════════════════════════════════════════
# BASE STAGE - Common Node.js setup with security hardening
# ═══════════════════════════════════════════════════════════════════════════════

FROM node:20-alpine AS base

# Security and operational labels
LABEL maintainer="iSECTECH Infrastructure Team <infrastructure@isectech.com>" \
  name="isectech-frontend" \
  version="2.0.1" \
  description="iSECTECH Security Platform Frontend Application (BuildKit Enhanced)" \
  vendor="iSECTECH" \
  architecture="amd64" \
  security.scan="true" \
  compliance.framework="SOC2,ISO27001,NIST,HIPAA" \
  service.type="frontend" \
  service.tier="presentation" \
  service.component="web-application"

# Install security updates and essential packages
RUN apk update && apk upgrade --no-cache && \
  apk add --no-cache \
  ca-certificates \
  libc6-compat \
  dumb-init \
  tzdata \
  curl \
  jq \
  && update-ca-certificates \
  && rm -rf /var/cache/apk/*

# Create non-root user with specific IDs for security
RUN addgroup -g 10001 -S isectech && \
  adduser -u 10001 -S isectech -G isectech -s /bin/sh

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Set working directory
WORKDIR /app

# Set base Node.js environment variables
ENV NEXT_TELEMETRY_DISABLED=1 \
  NODE_OPTIONS="--max-old-space-size=2048" \
  NPM_CONFIG_CACHE=/tmp/.npm \
  NPM_CONFIG_PROGRESS=false \
  NPM_CONFIG_LOGLEVEL=warn

# ═══════════════════════════════════════════════════════════════════════════════
# DEPENDENCIES STAGE - Install production dependencies with BuildKit caching
# ═══════════════════════════════════════════════════════════════════════════════

FROM base AS deps

# Copy package files for dependency installation
COPY package.json package-lock.json* ./

# Install production dependencies with BuildKit cache mount for optimal performance
RUN --mount=type=cache,target=/tmp/.npm,sharing=locked \
  --mount=type=cache,target=/app/.npm,sharing=locked \
  npm install --only=production --legacy-peer-deps --no-audit --no-fund --omit=optional --prefer-offline && \
  npm cache clean --force

# ═══════════════════════════════════════════════════════════════════════════════
# DEV DEPENDENCIES STAGE - Install all dependencies for building
# ═══════════════════════════════════════════════════════════════════════════════

FROM base AS deps-dev

# Copy package files
COPY package.json package-lock.json* ./

# Install all dependencies including dev dependencies with BuildKit cache mount
RUN --mount=type=cache,target=/tmp/.npm,sharing=locked \
  --mount=type=cache,target=/app/.npm,sharing=locked \
  npm install --legacy-peer-deps --no-audit --no-fund --prefer-offline

# ═══════════════════════════════════════════════════════════════════════════════
# SECURITY AUDIT STAGE - Security vulnerability scanning
# ═══════════════════════════════════════════════════════════════════════════════

FROM deps-dev AS security-audit

# Run security audit (non-blocking for build)
RUN npm audit --audit-level moderate || echo "Security audit completed with findings - review required"

# Check for known security issues in dependencies
RUN npm ls --depth=0 || echo "Dependency tree analysis completed"

# ═══════════════════════════════════════════════════════════════════════════════
# BUILDER STAGE - Build the Next.js application
# ═══════════════════════════════════════════════════════════════════════════════

FROM base AS builder

WORKDIR /app

# Copy dev dependencies from deps-dev stage
COPY --from=deps-dev /app/node_modules ./node_modules

# Copy source code with proper ownership
COPY --chown=isectech:isectech . .

# Build arguments for version and configuration
ARG BUILD_DATE
ARG BUILD_VERSION=2.0.1
ARG BUILD_COMMIT
ARG NODE_ENV=production
ARG NEXT_PUBLIC_APP_ENV=production

# Set build-time environment variables for security and optimization
ENV NODE_ENV=${NODE_ENV} \
  NEXT_TELEMETRY_DISABLED=1 \
  GENERATE_SOURCEMAP=false \
  NEXT_PUBLIC_APP_ENV=${NEXT_PUBLIC_APP_ENV} \
  # Security build configurations
  SECURITY_HEADERS_ENABLED=true \
  CSP_ENABLED=true \
  HSTS_ENABLED=true \
  # Performance optimizations
  NEXT_EXPERIMENTAL_STANDALONE=true \
  NEXT_EXPERIMENTAL_OUTPUT_STANDALONE=true \
  # Build metadata
  NEXT_PUBLIC_BUILD_DATE=${BUILD_DATE} \
  NEXT_PUBLIC_BUILD_VERSION=${BUILD_VERSION} \
  NEXT_PUBLIC_BUILD_COMMIT=${BUILD_COMMIT}

# Use the repo's production Next.js config (TypeScript) for the build
RUN cp -f next.config.production.ts next.config.ts

# Build the application with optimization and BuildKit cache mount for Next.js cache
RUN --mount=type=cache,target=/app/.next/cache,sharing=locked \
  npm run build

# Verify build output
RUN ls -la .next/

# Clean up dev dependencies and cache
RUN rm -rf node_modules && npm cache clean --force

# ═══════════════════════════════════════════════════════════════════════════════
# RUNTIME STAGE - Final production image with Next.js standalone
# ═══════════════════════════════════════════════════════════════════════════════

FROM base AS runtime

WORKDIR /app

# Copy production dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy Next.js standalone build output
COPY --from=builder --chown=isectech:isectech /app/.next/standalone ./
COPY --from=builder --chown=isectech:isectech /app/.next/static ./.next/static
COPY --from=builder --chown=isectech:isectech /app/public ./public

# Copy package.json for runtime
COPY --chown=isectech:isectech package.json ./

# Create required directories with proper permissions
RUN mkdir -p /app/logs /app/tmp /app/.next/cache && \
  chown -R isectech:isectech /app && \
  chmod 755 /app && \
  chmod 700 /app/logs /app/tmp /app/.next/cache

# Switch to non-root user
USER 10001:10001

# ═══════════════════════════════════════════════════════════════════════════════
# RUNTIME CONFIGURATION
# ═══════════════════════════════════════════════════════════════════════════════

# Environment variables optimized for Cloud Run and production
ENV SERVICE_NAME=isectech-frontend \
  SERVICE_VERSION=2.0.1 \
  NODE_ENV=production \
  # Next.js configuration
  NEXT_TELEMETRY_DISABLED=1 \
  PORT=3000 \
  HOSTNAME=0.0.0.0 \
  # Security configuration
  SECURITY_HEADERS_ENABLED=true \
  CSP_ENABLED=true \
  HSTS_ENABLED=true \
  SECURE_COOKIES=true \
  CORS_ENABLED=true \
  CORS_ORIGIN=https://protect.isectech.com \
  # Authentication (will be overridden by Cloud Run)
  NEXTAUTH_URL=https://protect.isectech.com \
  NEXTAUTH_SECRET= \
  # API endpoints (will be overridden by Cloud Run)
  NEXT_PUBLIC_API_URL=https://api.isectech.com \
  NEXT_PUBLIC_API_GATEWAY_URL=https://gateway.isectech.com \
  NEXT_PUBLIC_WS_URL=wss://ws.isectech.com \
  # Feature flags
  NEXT_PUBLIC_FEATURE_DARK_MODE=true \
  NEXT_PUBLIC_FEATURE_NOTIFICATIONS=true \
  NEXT_PUBLIC_FEATURE_REAL_TIME=true \
  NEXT_PUBLIC_FEATURE_ANALYTICS=true \
  NEXT_PUBLIC_FEATURE_MULTI_TENANT=true \
  # Performance settings
  PERFORMANCE_MONITORING=true \
  SENTRY_ENABLED=false \
  ANALYTICS_ENABLED=false \
  # CDN and assets
  NEXT_PUBLIC_CDN_URL= \
  NEXT_PUBLIC_ASSETS_URL= \
  # Application settings
  NEXT_PUBLIC_APP_NAME="iSECTECH Protect" \
  NEXT_PUBLIC_APP_DESCRIPTION="Enterprise Cybersecurity Command Center" \
  NEXT_PUBLIC_COMPANY_NAME="iSECTECH" \
  NEXT_PUBLIC_SUPPORT_EMAIL=support@isectech.com \
  NEXT_PUBLIC_SECURITY_EMAIL=security@isectech.com \
  # Session configuration
  SESSION_TIMEOUT=28800 \
  SESSION_ABSOLUTE_TIMEOUT=86400 \
  IDLE_TIMEOUT=3600 \
  # Rate limiting
  RATE_LIMIT_ENABLED=true \
  RATE_LIMIT_MAX=100 \
  RATE_LIMIT_WINDOW=900 \
  # Logging
  LOG_LEVEL=info \
  LOG_FORMAT=json \
  ACCESS_LOG_ENABLED=true \
  ERROR_LOG_ENABLED=true \
  # Health and monitoring
  HEALTH_CHECK_ENABLED=true \
  METRICS_ENABLED=true \
  TRACING_ENABLED=false \
  # Build information
  NEXT_PUBLIC_BUILD_DATE= \
  NEXT_PUBLIC_BUILD_VERSION=2.0.1 \
  NEXT_PUBLIC_BUILD_COMMIT=

# Expose port
EXPOSE 3000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]

# ═══════════════════════════════════════════════════════════════════════════════
# BUILD INSTRUCTIONS (BuildKit Enhanced)
# ═══════════════════════════════════════════════════════════════════════════════

# Build with BuildKit (recommended):
# DOCKER_BUILDKIT=1 docker build -f Dockerfile.frontend.production.buildkit -t isectech-frontend:latest .
#
# Build with build args and BuildKit:
# DOCKER_BUILDKIT=1 docker build -f Dockerfile.frontend.production.buildkit \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg BUILD_VERSION=v2.0.1 \
#   --build-arg BUILD_COMMIT=$(git rev-parse HEAD) \
#   -t isectech-frontend:v2.0.1 .