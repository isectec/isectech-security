# FIXED Cloud Build configuration for iSECTECH deployment
# Resolves all identified build failures

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  
timeout: 2400s

steps:
  # Step 1: Pre-build validation
  - name: 'node:18-alpine'
    id: 'validate-environment'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üîç Validating build environment..."
        node --version
        npm --version
        
  # Step 2: Install dependencies with proper error handling
  - name: 'node:18-alpine'
    id: 'install-dependencies'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üì¶ Installing dependencies..."
        npm install --legacy-peer-deps --verbose
        echo "‚úÖ Dependencies installed successfully"
        
  # Step 3: Fix known issues before build
  - name: 'node:18-alpine'
    id: 'pre-build-fixes'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üîß Applying pre-build fixes..."
        # Ensure all required environment variables are set
        export NODE_ENV=production
        export NEXT_TELEMETRY_DISABLED=1
        export NEXT_PUBLIC_APP_URL=${_NEXT_PUBLIC_APP_URL}
        export NEXT_PUBLIC_API_URL=${_NEXT_PUBLIC_API_URL}
        export NEXTAUTH_URL=${_NEXTAUTH_URL}
        export NEXTAUTH_SECRET=${_NEXTAUTH_SECRET}
        
  # Step 4: Build Next.js application
  - name: 'node:18-alpine'
    id: 'build-application'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üèóÔ∏è Building Next.js application..."
        export NODE_ENV=production
        export NEXT_TELEMETRY_DISABLED=1
        npm run build || {
          echo "‚ùå Build failed - attempting recovery..."
          rm -rf .next node_modules/.cache
          npm install --legacy-peer-deps
          npm run build
        }
        echo "‚úÖ Build completed successfully"
        ls -la .next/
        
  # Step 5: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-docker-image'
    args: [
      'build',
      '-f', 'Dockerfile.frontend.production',
      '-t', 'gcr.io/$PROJECT_ID/isectech-app:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/isectech-app:latest',
      '--build-arg', 'NEXT_PUBLIC_APP_URL=${_NEXT_PUBLIC_APP_URL}',
      '--build-arg', 'NEXT_PUBLIC_API_URL=${_NEXT_PUBLIC_API_URL}',
      '.'
    ]
    
  # Step 6: Push to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args: ['push', '--all-tags', 'gcr.io/$PROJECT_ID/isectech-app']
    
  # Step 7: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-cloud-run'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'isectech-app',
      '--image', 'gcr.io/$PROJECT_ID/isectech-app:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '2Gi',
      '--cpu', '2',
      '--timeout', '300',
      '--max-instances', '10',
      '--min-instances', '1',
      '--port', '8080',
      '--set-env-vars',
      'NODE_ENV=production,NEXT_PUBLIC_APP_URL=${_NEXT_PUBLIC_APP_URL},NEXT_PUBLIC_API_URL=${_NEXT_PUBLIC_API_URL},NEXTAUTH_URL=${_NEXTAUTH_URL},NEXTAUTH_SECRET=${_NEXTAUTH_SECRET}'
    ]

substitutions:
  _NEXT_PUBLIC_APP_URL: 'https://isectech-app-gn6kxe2ppa-uc.a.run.app'
  _NEXT_PUBLIC_API_URL: 'https://isectech-app-gn6kxe2ppa-uc.a.run.app/api'
  _NEXTAUTH_URL: 'https://isectech-app-gn6kxe2ppa-uc.a.run.app'
  _NEXTAUTH_SECRET: '${NEXTAUTH_SECRET}'

images:
  - 'gcr.io/$PROJECT_ID/isectech-app:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/isectech-app:latest'