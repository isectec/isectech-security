/**
 * EMERGENCY SECURITY MIDDLEWARE - Phase 1 Critical Vulnerability Fixes
 *
 * CRITICAL: This middleware implements emergency security patches for
 * the confirmed CVSS 9.8 multi-tenant boundary bypass vulnerability
 *
 * BUSINESS IMPACT: Prevents $15M-$45M potential breach cost
 * DEPLOYMENT: Emergency deployment within 8 hours
 */

import { NextRequest, NextResponse } from 'next/server';
import { authorizationMiddleware } from './api-gateway/security/authorization-middleware';
import { validateIncomingRequest } from './api-gateway/security/request-validation-middleware';
import { createTenantMiddleware, TenantMiddlewareOptions } from './app/lib/middleware/tenant-context';
import { withEmergencyTenantValidation } from './app/lib/security/emergency-tenant-validation';

// Configure tenant middleware options
const tenantMiddlewareOptions: Partial<TenantMiddlewareOptions> = {
  enforceIpWhitelist: process.env.NODE_ENV === 'production',
  requireSecurityClearance: true,
  enableRateLimiting: true,
  logAllAccess: true,
  enableCrossTenantAccess: false,
  validationMode: 'strict',
};

// Create tenant middleware instance
const tenantMiddleware = createTenantMiddleware(tenantMiddlewareOptions);

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Skip middleware for static assets and internal Next.js routes
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/api/_next/') ||
    pathname.startsWith('/favicon.ico') ||
    pathname.startsWith('/robots.txt') ||
    pathname.startsWith('/sitemap.xml') ||
    pathname.includes('.')
  ) {
    return NextResponse.next();
  }

  // Health check endpoint (bypass tenant middleware)
  if (pathname === '/api/health') {
    return NextResponse.next();
  }

  // Public authentication routes (bypass tenant middleware)
  if (
    pathname.startsWith('/api/auth/signin') ||
    pathname.startsWith('/api/auth/signup') ||
    pathname.startsWith('/api/auth/callback') ||
    pathname.startsWith('/signin') ||
    pathname.startsWith('/signup')
  ) {
    return NextResponse.next();
  }

  // ðŸš¨ EMERGENCY SECURITY + COMPREHENSIVE AUTHORIZATION: Apply to ALL API routes
  if (pathname.startsWith('/api/')) {
    console.log(
      `ðŸ”’ EMERGENCY SECURITY: Validating tenant access for ${pathname} from ${
        request.headers.get('x-forwarded-for') || 'unknown'
      }`
    );

    try {
      // First apply emergency tenant validation
      return await withEmergencyTenantValidation(request, async (validatedRequest) => {
        // OpenAPI/body schema request validation for protected endpoints
        const validationResponse = await validateIncomingRequest(validatedRequest);
        if (validationResponse) {
          return validationResponse;
        }
        // Apply comprehensive authorization middleware
        const authResult = await authorizationMiddleware.authorize(validatedRequest);

        if (!authResult.allowed) {
          console.warn('ðŸš« AUTHORIZATION DENIED:', {
            path: pathname,
            method: validatedRequest.method,
            reason: authResult.reason,
            userId: authResult.userId || 'unknown',
            tenantId: authResult.tenantId || 'unknown',
            evaluationTimeMs: authResult.evaluationTimeMs,
          });

          return NextResponse.json(
            {
              error: 'Authorization failed',
              reason: authResult.reason,
              code: 'AUTHORIZATION_DENIED',
              timestamp: new Date().toISOString(),
            },
            {
              status: 403,
              headers: {
                'X-Security-Block': 'AUTHORIZATION_MIDDLEWARE',
                'X-Block-Reason': 'INSUFFICIENT_PERMISSIONS',
                'X-Evaluation-Time': authResult.evaluationTimeMs?.toString() || '0',
              },
            }
          );
        }

        // Authorization passed, continue with tenant middleware
        const response = await tenantMiddleware(validatedRequest);

        // Add comprehensive security headers
        response.headers.set('X-Security-Mode', 'COMPREHENSIVE_AUTHORIZATION_ACTIVE');
        response.headers.set('X-Security-Level', 'CRITICAL_PROTECTION_ACTIVE');
        response.headers.set('X-Authorization-Result', 'ALLOWED');
        response.headers.set('X-Evaluation-Time', authResult.evaluationTimeMs?.toString() || '0');
        response.headers.set('X-Cache-Hit', authResult.cacheHit?.toString() || 'false');
        response.headers.set('X-Frame-Options', 'DENY');
        response.headers.set('X-Content-Type-Options', 'nosniff');
        response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
        response.headers.set('X-XSS-Protection', '1; mode=block');
        response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');

        // Add CORS headers for API routes with enhanced security
        response.headers.set('Access-Control-Allow-Origin', process.env.ALLOWED_ORIGINS || 'https://app.isectech.org');
        response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
        response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Tenant-ID, X-Session-ID');
        response.headers.set('Access-Control-Max-Age', '86400');
        response.headers.set(
          'Access-Control-Expose-Headers',
          'X-Security-Mode, X-Security-Level, X-Authorization-Result, X-Evaluation-Time'
        );

        return response;
      });
    } catch (error) {
      console.error('ðŸš¨ COMPREHENSIVE SECURITY ERROR:', error);

      // Log security incident
      console.error('SECURITY INCIDENT:', {
        type: 'AUTHORIZATION_MIDDLEWARE_FAILURE',
        path: pathname,
        method: request.method,
        ip: request.headers.get('x-forwarded-for') || 'unknown',
        userAgent: request.headers.get('user-agent') || 'unknown',
        timestamp: new Date().toISOString(),
        error: error.message,
        stack: error.stack,
      });

      return NextResponse.json(
        {
          error: 'Security validation failed',
          code: 'AUTHORIZATION_SERVICE_ERROR',
          timestamp: new Date().toISOString(),
        },
        {
          status: 500,
          headers: {
            'X-Security-Block': 'AUTHORIZATION_SERVICE_ERROR',
            'X-Block-Reason': 'MIDDLEWARE_FAILURE',
          },
        }
      );
    }
  }

  // Apply standard tenant middleware to app routes
  if (pathname.startsWith('/app/')) {
    try {
      const response = await tenantMiddleware(request);

      // Add security headers
      response.headers.set('X-Security-Mode', 'EMERGENCY_PROTECTION_ACTIVE');
      response.headers.set('X-Frame-Options', 'DENY');
      response.headers.set('X-Content-Type-Options', 'nosniff');
      response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
      response.headers.set('X-XSS-Protection', '1; mode=block');

      return response;
    } catch (error) {
      console.error('Middleware error:', error);
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });
    }
  }

  // Handle tenant-based routing for the main application
  if (pathname === '/' || pathname.startsWith('/dashboard')) {
    // Extract tenant from subdomain or header
    const host = request.headers.get('host');
    const tenantId = request.headers.get('X-Tenant-ID');

    if (host && !tenantId) {
      const subdomain = host.split('.')[0];
      if (subdomain && subdomain !== 'app' && subdomain !== 'www') {
        // Rewrite to include tenant context
        const url = request.nextUrl.clone();
        url.searchParams.set('tenant', subdomain);
        return NextResponse.rewrite(url);
      }
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - robots.txt (robots file)
     * - sitemap.xml (sitemap file)
     */
    '/((?!_next/static|_next/image|favicon.ico|robots.txt|sitemap.xml).*)',
  ],
};
